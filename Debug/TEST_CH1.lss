
TEST_CH1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00003266  000032fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001d4  008001d4  0000346e  2**0
                  ALLOC
  3 .stab         0000381c  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001868  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000084f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000a856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000b9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000cb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000ce29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__vector_1>
       8:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_2>
       c:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_3>
      10:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_4>
      14:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_5>
      18:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_6>
      1c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_7>
      20:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_8>
      24:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_9>
      28:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_10>
      2c:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 17 	call	0x2fee	; 0x2fee <main>
      8a:	0c 94 31 19 	jmp	0x3262	; 0x3262 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 eb       	ldi	r26, 0xB4	; 180
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 eb       	ldi	r24, 0xB4	; 180
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e4 54       	subi	r30, 0x44	; 68
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIMER0_voidInit>:
/**************************************************************************************/
/*											TIM0									  */
/**************************************************************************************/

void TIMER0_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
#error "Wrong TIMER0_OVERFLOW_INTERRUPT Config"
#endif

#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Initialize Waveform Generation Mode as PWM Mode*/
	SET_BIT(TCCR0 , TCCR0_WGM00) ;
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM01) ;
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	87 7f       	andi	r24, 0xF7	; 247
     cf8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_COM01) ;
#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR0 , TCCR0_COM00) ;
	SET_BIT(TCCR0 , TCCR0_COM01) ;
#elif TIMER0_CTC_PWM_MODE == TIMER_SET_ON_CTC_CLR_ON_TOP
	SET_BIT(TCCR0 , TCCR0_COM00) ;
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_COM01) ;
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	8c 93       	st	X, r24
#else
#error "Wrong TIMER0_CTC_PWM_MODE Config"
#endif

	/*Set the Required CTC Value*/
	OCR0 = TIMER0_CTC_VAL ;
     d16:	ec e5       	ldi	r30, 0x5C	; 92
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	80 83       	st	Z, r24
#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 7f       	andi	r24, 0xF8	; 248
     d2a:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	85 60       	ori	r24, 0x05	; 5
     d38:	8c 93       	st	X, r24
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TIMER0_voidSetPreload>:

void TIMER0_voidSetPreload(u8 copy_u8Preload)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = copy_u8Preload ;
     d4c:	e2 e5       	ldi	r30, 0x52	; 82
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	80 83       	st	Z, r24
}
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC(u8 copy_u8CTC)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CTC ;
     d68:	ec e5       	ldi	r30, 0x5C	; 92
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	80 83       	st	Z, r24
}
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <TIMER0_voidSetFastPWM>:


void TIMER0_voidSetFastPWM(u8 copy_u8PWM)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Set the Required CTC Value*/
	OCR0 = copy_u8PWM ;
#endif
}
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <TIMER0_voidSetPhaseCorrectPWM>:


void TIMER0_voidSetPhaseCorrectPWM(u8 copy_u8PWM)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Set the Required CTC Value*/
	OCR0 = copy_u8PWM ;
     d98:	ec e5       	ldi	r30, 0x5C	; 92
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	80 83       	st	Z, r24
#endif
}
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62

	return TCNT0 ;
     db0:	e2 e5       	ldi	r30, 0x52	; 82
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <TIMER1_voidInit>:

/**************************************************************************************/
/*											TIM1									  */
/**************************************************************************************/
void TIMER1_voidInit(void)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,TCCR1A_WGM10);
	SET_BIT(TCCR1A,TCCR1A_WGM11);
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1B,TCCR1B_WGM13);
#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     dc4:	af e4       	ldi	r26, 0x4F	; 79
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ef e4       	ldi	r30, 0x4F	; 79
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     dd2:	af e4       	ldi	r26, 0x4F	; 79
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef e4       	ldi	r30, 0x4F	; 79
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     de0:	ae e4       	ldi	r26, 0x4E	; 78
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ee e4       	ldi	r30, 0x4E	; 78
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 60       	ori	r24, 0x08	; 8
     dec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     dee:	ae e4       	ldi	r26, 0x4E	; 78
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ee e4       	ldi	r30, 0x4E	; 78
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the require CTC Values*/
	OCR1AL = (u8)TIMER1_CTCA_VAL ;
     dfc:	ea e4       	ldi	r30, 0x4A	; 74
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	84 ef       	ldi	r24, 0xF4	; 244
     e02:	80 83       	st	Z, r24
	OCR1AH |= (TIMER1_CTCA_VAL>>8) ;
     e04:	ab e4       	ldi	r26, 0x4B	; 75
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	eb e4       	ldi	r30, 0x4B	; 75
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	8c 93       	st	X, r24

	OCR1BL = TIMER1_CTCB_VAL ;
     e12:	e8 e4       	ldi	r30, 0x48	; 72
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	10 82       	st	Z, r1
	OCR1BH |= (TIMER1_CTCB_VAL>>8) ;
     e18:	a9 e4       	ldi	r26, 0x49	; 73
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e9 e4       	ldi	r30, 0x49	; 73
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8c 93       	st	X, r24
	/*Set ICR1*/
#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
	ICR1L = (u8)TIMER1_ICR1_VAL ;
     e24:	e6 e4       	ldi	r30, 0x46	; 70
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 e2       	ldi	r24, 0x20	; 32
     e2a:	80 83       	st	Z, r24
	ICR1H = (TIMER1_ICR1_VAL>>8) ;
     e2c:	e7 e4       	ldi	r30, 0x47	; 71
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8e e4       	ldi	r24, 0x4E	; 78
     e32:	80 83       	st	Z, r24
#if TIMER1_ICR_EDGE == RISING_EDGE
	SET_BIT(TCCR1B , TCCR1B_ICES1) ;
     e34:	ae e4       	ldi	r26, 0x4E	; 78
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ee e4       	ldi	r30, 0x4E	; 78
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	8c 93       	st	X, r24
	/*Set OCR1A mode*/
#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
	CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
     e42:	af e4       	ldi	r26, 0x4F	; 79
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef e4       	ldi	r30, 0x4F	; 79
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7b       	andi	r24, 0xBF	; 191
     e4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
     e50:	af e4       	ldi	r26, 0x4F	; 79
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24
	/*Set OCR1B mode*/
#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
	CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7e       	andi	r24, 0xEF	; 239
     e6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 62       	ori	r24, 0x20	; 32
     e78:	8c 93       	st	X, r24
#error "Wrong TIMER1_OCR1B_MODE Config"
#endif

	/*Timer1 PWM Interrupt Enable*/
#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_TOIE1) ;
     e7a:	a9 e5       	ldi	r26, 0x59	; 89
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e9 e5       	ldi	r30, 0x59	; 89
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8b 7f       	andi	r24, 0xFB	; 251
     e86:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
#endif

#if TIMER1_CTCA_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
     e88:	a9 e5       	ldi	r26, 0x59	; 89
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e9 e5       	ldi	r30, 0x59	; 89
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_CTCA_INTERRUPT Config"
#endif

#if TIMER1_CTCB_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
     e96:	a9 e5       	ldi	r26, 0x59	; 89
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e9 e5       	ldi	r30, 0x59	; 89
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	87 7f       	andi	r24, 0xF7	; 247
     ea2:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_CTCB_INTERRUPT Config"
#endif

#if TIMER1_ICR_INTERRUPT == DISABLE
	CLR_BIT(TIMSK , TIMSK_TICIE1) ;
     ea4:	a9 e5       	ldi	r26, 0x59	; 89
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e9 e5       	ldi	r30, 0x59	; 89
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8f 7d       	andi	r24, 0xDF	; 223
     eb0:	8c 93       	st	X, r24
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 7f       	andi	r24, 0xF8	; 248
     ebe:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	8c 93       	st	X, r24
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload(u16 copy_u8Preload)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <TIMER1_voidSetPreload+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L = copy_u8Preload ;
     ee2:	ec e4       	ldi	r30, 0x4C	; 76
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24
	TCNT1H |= (copy_u8Preload>>8) ;
     eea:	ad e4       	ldi	r26, 0x4D	; 77
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ed e4       	ldi	r30, 0x4D	; 77
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	20 81       	ld	r18, Z
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	89 2f       	mov	r24, r25
     efa:	99 27       	eor	r25, r25
     efc:	82 2b       	or	r24, r18
     efe:	8c 93       	st	X, r24
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA(u16 copy_u8CTCA)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <TIMER1_voidSetCTCA+0x6>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = copy_u8CTCA ;
     f18:	ea e4       	ldi	r30, 0x4A	; 74
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	80 83       	st	Z, r24
	OCR1AH |= (copy_u8CTCA>>8) ;
     f20:	ab e4       	ldi	r26, 0x4B	; 75
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e4       	ldi	r30, 0x4B	; 75
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	20 81       	ld	r18, Z
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	89 2f       	mov	r24, r25
     f30:	99 27       	eor	r25, r25
     f32:	82 2b       	or	r24, r18
     f34:	8c 93       	st	X, r24
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB(u16 copy_u8CTCB)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TIMER1_voidSetCTCB+0x6>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL = copy_u8CTCB ;
     f4e:	e8 e4       	ldi	r30, 0x48	; 72
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	80 83       	st	Z, r24
	OCR1BH |= (copy_u8CTCB>>8) ;
     f56:	a9 e4       	ldi	r26, 0x49	; 73
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e9 e4       	ldi	r30, 0x49	; 73
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	20 81       	ld	r18, Z
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	89 2f       	mov	r24, r25
     f66:	99 27       	eor	r25, r25
     f68:	82 2b       	or	r24, r18
     f6a:	8c 93       	st	X, r24
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <TIMER1_u8GetTimerCounterValue>:

u16 TIMER1_u8GetTimerCounterValue(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <TIMER1_u8GetTimerCounterValue+0x6>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_Var;
	Local_Var = TCNT1L;
     f80:	ec e4       	ldi	r30, 0x4C	; 76
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
	Local_Var |= (TCNT1H<<8);
     f8e:	ed e4       	ldi	r30, 0x4D	; 77
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	98 2f       	mov	r25, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	9c 01       	movw	r18, r24
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	82 2b       	or	r24, r18
     fa4:	93 2b       	or	r25, r19
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01

	return Local_Var;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <TIMER2_voidInit>:

/**************************************************************************************/
/*											TIM2									  */
/**************************************************************************************/
void TIMER2_voidInit(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
#endif

#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

	/*Initialize Waveform Generation Mode as Fast PWM Mode*/
	SET_BIT(TCCR2 , TCCR2_WGM20) ;
     fc0:	a5 e4       	ldi	r26, 0x45	; 69
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e4       	ldi	r30, 0x45	; 69
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 64       	ori	r24, 0x40	; 64
     fcc:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_WGM21) ;
     fce:	a5 e4       	ldi	r26, 0x45	; 69
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e4       	ldi	r30, 0x45	; 69
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 60       	ori	r24, 0x08	; 8
     fda:	8c 93       	st	X, r24
	/*Set CTC Fast PWM MODE*/
#if TIMER2_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
	CLR_BIT(TCCR2 , TCCR2_COM20) ;
	CLR_BIT(TCCR2 , TCCR2_COM21) ;
#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
	CLR_BIT(TCCR2 , TCCR2_COM20) ;
     fdc:	a5 e4       	ldi	r26, 0x45	; 69
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e4       	ldi	r30, 0x45	; 69
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7e       	andi	r24, 0xEF	; 239
     fe8:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_COM21) ;
     fea:	a5 e4       	ldi	r26, 0x45	; 69
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e4       	ldi	r30, 0x45	; 69
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	8c 93       	st	X, r24
#else
#error "Wrong TIMER2_CTC_PWM_MODE Config"
#endif

	/*Set the Required CTC Value*/
	OCR2 = TIMER2_CTC_VAL ;
     ff8:	e3 e4       	ldi	r30, 0x43	; 67
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 ec       	ldi	r24, 0xC0	; 192
     ffe:	80 83       	st	Z, r24
#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 7f       	andi	r24, 0xF8	; 248
    100c:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    100e:	a5 e4       	ldi	r26, 0x45	; 69
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e4       	ldi	r30, 0x45	; 69
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	85 60       	ori	r24, 0x05	; 5
    101a:	8c 93       	st	X, r24
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <TIMER2_voidSetPreload>:

void TIMER2_voidSetPreload(u8 copy_u8Preload)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = copy_u8Preload ;
    102e:	e4 e4       	ldi	r30, 0x44	; 68
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	80 83       	st	Z, r24
}
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <TIMER2_voidSetCTC>:
void TIMER2_voidSetCTC(u8 copy_u8CTC)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CTC ;
    104a:	e3 e4       	ldi	r30, 0x43	; 67
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	80 83       	st	Z, r24
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <TIMER2_voidSetFastPWM>:


void TIMER2_voidSetFastPWM(u8 copy_u8PWM)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
    1066:	e3 e4       	ldi	r30, 0x43	; 67
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
#endif
}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <TIMER2_voidSetPhaseCorrectPWM>:


void TIMER2_voidSetPhaseCorrectPWM(u8 copy_u8PWM)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1092:	e4 e4       	ldi	r30, 0x44	; 68
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <TIMER_u8SetCallBack>:



/*****************************************************************************************************/
u8 TIMER_u8SetCallBack(void(*copy_ptfCallBackFunc)(void),u8 copy_u8VectorID)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <TIMER_u8SetCallBack+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <TIMER_u8SetCallBack+0x8>
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = E_OK;
    10b2:	1a 82       	std	Y+2, r1	; 0x02
	if((copy_u8VectorID<=TIMER0_OVF_VECTOR_ID) && (copy_u8VectorID>=TIMER2_CTC_VECTOR_ID))
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	8c 30       	cpi	r24, 0x0C	; 12
    10b8:	d0 f4       	brcc	.+52     	; 0x10ee <TIMER_u8SetCallBack+0x50>
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	b8 f0       	brcs	.+46     	; 0x10ee <TIMER_u8SetCallBack+0x50>
	{
		u8 Local_u8ArrayIndex = copy_u8VectorID - CBF_OFFSET ;
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	84 50       	subi	r24, 0x04	; 4
    10c4:	89 83       	std	Y+1, r24	; 0x01
		if(copy_ptfCallBackFunc!= NULL)
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	69 f0       	breq	.+26     	; 0x10e8 <TIMER_u8SetCallBack+0x4a>
		{
			TIMERS_ptfCallBackFuncArr[Local_u8ArrayIndex]= copy_ptfCallBackFunc;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	fc 01       	movw	r30, r24
    10da:	ec 52       	subi	r30, 0x2C	; 44
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <TIMER_u8SetCallBack+0x54>
		}
		else
		{
			Local_u8ErrorState = E_NOK_NULL_PTR;
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <TIMER_u8SetCallBack+0x54>
		}
	}
	else
	{
		Local_u8ErrorState = E_NOK_OUT_OF_RANGE;
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <__vector_11>:


/***************TIMER0 OVF************************/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    112e:	80 91 e2 01 	lds	r24, 0x01E2
    1132:	90 91 e3 01 	lds	r25, 0x01E3
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	29 f0       	breq	.+10     	; 0x1144 <__vector_11+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET]();
    113a:	e0 91 e2 01 	lds	r30, 0x01E2
    113e:	f0 91 e3 01 	lds	r31, 0x01E3
    1142:	09 95       	icall
	}
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_10>:


/***************TIMER0 CTC************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    1194:	80 91 e0 01 	lds	r24, 0x01E0
    1198:	90 91 e1 01 	lds	r25, 0x01E1
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	29 f0       	breq	.+10     	; 0x11aa <__vector_10+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET]();
    11a0:	e0 91 e0 01 	lds	r30, 0x01E0
    11a4:	f0 91 e1 01 	lds	r31, 0x01E1
    11a8:	09 95       	icall
	}
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_9>:


/***************TIMER1 OVF************************/
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    11fa:	80 91 de 01 	lds	r24, 0x01DE
    11fe:	90 91 df 01 	lds	r25, 0x01DF
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	29 f0       	breq	.+10     	; 0x1210 <__vector_9+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET]();
    1206:	e0 91 de 01 	lds	r30, 0x01DE
    120a:	f0 91 df 01 	lds	r31, 0x01DF
    120e:	09 95       	icall
	}
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_8>:


/***************TIMER1 CTCB***********************/
void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET] != NULL)
    1260:	80 91 dc 01 	lds	r24, 0x01DC
    1264:	90 91 dd 01 	lds	r25, 0x01DD
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	29 f0       	breq	.+10     	; 0x1276 <__vector_8+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET]();
    126c:	e0 91 dc 01 	lds	r30, 0x01DC
    1270:	f0 91 dd 01 	lds	r31, 0x01DD
    1274:	09 95       	icall
	}
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	ff 91       	pop	r31
    127c:	ef 91       	pop	r30
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_7>:


/***************TIMER1 CTCA***********************/
void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER1_CTCA_VECTOR_ID - CBF_OFFSET] != NULL)
    12c6:	80 91 da 01 	lds	r24, 0x01DA
    12ca:	90 91 db 01 	lds	r25, 0x01DB
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	29 f0       	breq	.+10     	; 0x12dc <__vector_7+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_CTCA_VECTOR_ID - CBF_OFFSET]();
    12d2:	e0 91 da 01 	lds	r30, 0x01DA
    12d6:	f0 91 db 01 	lds	r31, 0x01DB
    12da:	09 95       	icall
	}
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_6>:


/***************TIMER1 ICU************************/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET] != NULL)
    132c:	80 91 d8 01 	lds	r24, 0x01D8
    1330:	90 91 d9 01 	lds	r25, 0x01D9
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	29 f0       	breq	.+10     	; 0x1342 <__vector_6+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET]();
    1338:	e0 91 d8 01 	lds	r30, 0x01D8
    133c:	f0 91 d9 01 	lds	r31, 0x01D9
    1340:	09 95       	icall
	}
}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_5>:

/***************TIMER2 OVF************************/
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    1392:	80 91 d6 01 	lds	r24, 0x01D6
    1396:	90 91 d7 01 	lds	r25, 0x01D7
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	29 f0       	breq	.+10     	; 0x13a8 <__vector_5+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET]();
    139e:	e0 91 d6 01 	lds	r30, 0x01D6
    13a2:	f0 91 d7 01 	lds	r31, 0x01D7
    13a6:	09 95       	icall
	}
}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_4>:


/***************TIMER2 CTC************************/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    13f8:	80 91 d4 01 	lds	r24, 0x01D4
    13fc:	90 91 d5 01 	lds	r25, 0x01D5
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	29 f0       	breq	.+10     	; 0x140e <__vector_4+0x40>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET]();
    1404:	e0 91 d4 01 	lds	r30, 0x01D4
    1408:	f0 91 d5 01 	lds	r31, 0x01D5
    140c:	09 95       	icall
	}
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <GIE_VidEn>:
/*************************MCAL*************************/
#include "GIE_Interface.h"
#include "GIE_Config.h"
#include "GIE_Private.h"

void GIE_VidEn(){
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    143c:	af e5       	ldi	r26, 0x5F	; 95
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ef e5       	ldi	r30, 0x5F	; 95
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	8c 93       	st	X, r24
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GIE_VidDisable>:
void GIE_VidDisable(void){
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG,SREG_I);
    1458:	af e5       	ldi	r26, 0x5F	; 95
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e5       	ldi	r30, 0x5F	; 95
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8f 77       	andi	r24, 0x7F	; 127
    1464:	8c 93       	st	X, r24
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EXTI_voidInit>:
static void (*Global_pvInt1NotifcationFunction)(void) = NULL;
static void (*Global_pvInt2NotifcationFunction)(void) = NULL;

/*********************FUNCTIONS DEFINITIONS******************************/
void EXTI_voidInit (void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	#if	EXTI_INT0_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT0);
    1474:	ab e5       	ldi	r26, 0x5B	; 91
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	eb e5       	ldi	r30, 0x5B	; 91
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 64       	ori	r24, 0x40	; 64
    1480:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
			CLR_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
    1490:	a5 e5       	ldi	r26, 0x55	; 85
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e5       	ldi	r30, 0x55	; 85
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	8c 93       	st	X, r24
		#error "EXTI_INT0_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT1_ENALBE == ENALBE
		SET_BIT(GICR, GICR_INT1);
    149e:	ab e5       	ldi	r26, 0x5B	; 91
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e5       	ldi	r30, 0x5B	; 91
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
			CLR_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	84 60       	ori	r24, 0x04	; 4
    14c6:	8c 93       	st	X, r24
			SET_BIT(MCUCSR, MCUCSR_ISC2);
		#else
			#error "EXTI_INT2_CONTROL Error Configuration"
		#endif
	#elif EXTI_INT2_ENALBE == DISABLE
		CLR_BIT(GICR, GICR_INT2);
    14c8:	ab e5       	ldi	r26, 0x5B	; 91
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e5       	ldi	r30, 0x5B	; 91
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7d       	andi	r24, 0xDF	; 223
    14d4:	8c 93       	st	X, r24
	#else
		#error "EXTI_INT2_ENALBE Error Configuration"
	#endif
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <EXTI_u8SetInt0SenseControl>:


u8 EXTI_u8SetInt0SenseControl (u8 Copy_u8SenseControl)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <EXTI_u8SetInt0SenseControl+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <EXTI_u8SetInt0SenseControl+0x8>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3c 83       	std	Y+4, r19	; 0x04
    14f2:	2b 83       	std	Y+3, r18	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <EXTI_u8SetInt0SenseControl+0x24>
    14fe:	42 c0       	rjmp	.+132    	; 0x1584 <EXTI_u8SetInt0SenseControl+0xa8>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <EXTI_u8SetInt0SenseControl+0x38>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	51 f1       	breq	.+84     	; 0x1566 <EXTI_u8SetInt0SenseControl+0x8a>
    1512:	47 c0       	rjmp	.+142    	; 0x15a2 <EXTI_u8SetInt0SenseControl+0xc6>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	31 f0       	breq	.+12     	; 0x152a <EXTI_u8SetInt0SenseControl+0x4e>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <EXTI_u8SetInt0SenseControl+0x6c>
    1528:	3c c0       	rjmp	.+120    	; 0x15a2 <EXTI_u8SetInt0SenseControl+0xc6>
	{
		case LOW_LEVEL:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8d 7f       	andi	r24, 0xFD	; 253
    1536:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
    1538:	a5 e5       	ldi	r26, 0x55	; 85
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e5       	ldi	r30, 0x55	; 85
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8e 7f       	andi	r24, 0xFE	; 254
    1544:	8c 93       	st	X, r24
    1546:	30 c0       	rjmp	.+96     	; 0x15a8 <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case ON_CHANGE:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
    1548:	a5 e5       	ldi	r26, 0x55	; 85
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e5       	ldi	r30, 0x55	; 85
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8d 7f       	andi	r24, 0xFD	; 253
    1554:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	8c 93       	st	X, r24
    1564:	21 c0       	rjmp	.+66     	; 0x15a8 <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case FALLING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8e 7f       	andi	r24, 0xFE	; 254
    1580:	8c 93       	st	X, r24
    1582:	12 c0       	rjmp	.+36     	; 0x15a8 <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case RISING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	82 60       	ori	r24, 0x02	; 2
    1590:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
    1592:	a5 e5       	ldi	r26, 0x55	; 85
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e5       	ldi	r30, 0x55	; 85
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	8c 93       	st	X, r24
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		default:
		{
			return E_NOK;
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <EXTI_u8SetInt0SenseControl+0xdc>
		}
	}
	SET_BIT(GICR, GICR_INT0);
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 64       	ori	r24, 0x40	; 64
    15b4:	8c 93       	st	X, r24
	return E_OK;
    15b6:	1a 82       	std	Y+2, r1	; 0x02
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <EXTI_u8SetInt1SenseControl>:

u8 EXTI_u8SetInt1SenseControl(u8 Copy_u8SenseControl)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <EXTI_u8SetInt1SenseControl+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <EXTI_u8SetInt1SenseControl+0x8>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3c 83       	std	Y+4, r19	; 0x04
    15de:	2b 83       	std	Y+3, r18	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <EXTI_u8SetInt1SenseControl+0x24>
    15ea:	42 c0       	rjmp	.+132    	; 0x1670 <EXTI_u8SetInt1SenseControl+0xa8>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	2c f4       	brge	.+10     	; 0x1600 <EXTI_u8SetInt1SenseControl+0x38>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	51 f1       	breq	.+84     	; 0x1652 <EXTI_u8SetInt1SenseControl+0x8a>
    15fe:	47 c0       	rjmp	.+142    	; 0x168e <EXTI_u8SetInt1SenseControl+0xc6>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	22 30       	cpi	r18, 0x02	; 2
    1606:	31 05       	cpc	r19, r1
    1608:	31 f0       	breq	.+12     	; 0x1616 <EXTI_u8SetInt1SenseControl+0x4e>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	91 05       	cpc	r25, r1
    1612:	81 f0       	breq	.+32     	; 0x1634 <EXTI_u8SetInt1SenseControl+0x6c>
    1614:	3c c0       	rjmp	.+120    	; 0x168e <EXTI_u8SetInt1SenseControl+0xc6>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
    1616:	a5 e5       	ldi	r26, 0x55	; 85
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e5       	ldi	r30, 0x55	; 85
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	87 7f       	andi	r24, 0xF7	; 247
    1622:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
    1624:	a5 e5       	ldi	r26, 0x55	; 85
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e5       	ldi	r30, 0x55	; 85
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8b 7f       	andi	r24, 0xFB	; 251
    1630:	8c 93       	st	X, r24
    1632:	30 c0       	rjmp	.+96     	; 0x1694 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
    1634:	a5 e5       	ldi	r26, 0x55	; 85
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e5       	ldi	r30, 0x55	; 85
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	87 7f       	andi	r24, 0xF7	; 247
    1640:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
    1642:	a5 e5       	ldi	r26, 0x55	; 85
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e5       	ldi	r30, 0x55	; 85
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	84 60       	ori	r24, 0x04	; 4
    164e:	8c 93       	st	X, r24
    1650:	21 c0       	rjmp	.+66     	; 0x1694 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	8c 93       	st	X, r24
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
    1670:	a5 e5       	ldi	r26, 0x55	; 85
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e5       	ldi	r30, 0x55	; 85
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 60       	ori	r24, 0x08	; 8
    167c:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
    167e:	a5 e5       	ldi	r26, 0x55	; 85
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e5       	ldi	r30, 0x55	; 85
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	84 60       	ori	r24, 0x04	; 4
    168a:	8c 93       	st	X, r24
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	default:
	{
		return E_NOK;
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <EXTI_u8SetInt1SenseControl+0xdc>
	}
	}
	SET_BIT(GICR, GICR_INT1);
    1694:	ab e5       	ldi	r26, 0x5B	; 91
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	eb e5       	ldi	r30, 0x5B	; 91
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 68       	ori	r24, 0x80	; 128
    16a0:	8c 93       	st	X, r24
	return E_OK;
    16a2:	1a 82       	std	Y+2, r1	; 0x02
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <EXTI_u8SetInt2SenseControl>:

u8 EXTI_u8SetInt2SenseControl(u8 Copy_u8SenseControl)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <EXTI_u8SetInt2SenseControl+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <EXTI_u8SetInt2SenseControl+0x8>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <EXTI_u8SetInt2SenseControl+0x2c>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	21 30       	cpi	r18, 0x01	; 1
    16da:	31 05       	cpc	r19, r1
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <EXTI_u8SetInt2SenseControl+0x3c>
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <EXTI_u8SetInt2SenseControl+0x4c>
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
    16e0:	a4 e5       	ldi	r26, 0x54	; 84
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e4 e5       	ldi	r30, 0x54	; 84
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7b       	andi	r24, 0xBF	; 191
    16ec:	8c 93       	st	X, r24
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
    16f0:	a4 e5       	ldi	r26, 0x54	; 84
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e4 e5       	ldi	r30, 0x54	; 84
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 64       	ori	r24, 0x40	; 64
    16fc:	8c 93       	st	X, r24
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	default:
	{
		return E_NOK;
    1700:	31 e0       	ldi	r19, 0x01	; 1
    1702:	3a 83       	std	Y+2, r19	; 0x02
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <EXTI_u8SetInt2SenseControl+0x62>
	}
	}
	SET_BIT(GICR, GICR_INT2);
    1706:	ab e5       	ldi	r26, 0x5B	; 91
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e5       	ldi	r30, 0x5B	; 91
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 62       	ori	r24, 0x20	; 32
    1712:	8c 93       	st	X, r24
	return E_OK;
    1714:	1a 82       	std	Y+2, r1	; 0x02
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <EXTI_u8Int0SetCallBack>:


u8 EXTI_u8Int0SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <EXTI_u8Int0SetCallBack+0x6>
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	41 f0       	breq	.+16     	; 0x174e <EXTI_u8Int0SetCallBack+0x28>
	{
		Global_pvInt0NotifcationFunction = Copy_pvNotificationFunction;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	90 93 e5 01 	sts	0x01E5, r25
    1746:	80 93 e4 01 	sts	0x01E4, r24
		return E_OK;
    174a:	1b 82       	std	Y+3, r1	; 0x03
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <__vector_1>:

/*ISR for INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1760:	1f 92       	push	r1
    1762:	0f 92       	push	r0
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	0f 92       	push	r0
    1768:	11 24       	eor	r1, r1
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	ef 93       	push	r30
    1780:	ff 93       	push	r31
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt0NotifcationFunction != NULL)
    178a:	80 91 e4 01 	lds	r24, 0x01E4
    178e:	90 91 e5 01 	lds	r25, 0x01E5
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	29 f0       	breq	.+10     	; 0x17a0 <__vector_1+0x40>
	{
		Global_pvInt0NotifcationFunction();
    1796:	e0 91 e4 01 	lds	r30, 0x01E4
    179a:	f0 91 e5 01 	lds	r31, 0x01E5
    179e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <EXTI_u8Int1SetCallBack+0x6>
    17cc:	0f 92       	push	r0
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	41 f0       	breq	.+16     	; 0x17ee <EXTI_u8Int1SetCallBack+0x28>
	{
		Global_pvInt1NotifcationFunction = Copy_pvNotificationFunction;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	90 93 e7 01 	sts	0x01E7, r25
    17e6:	80 93 e6 01 	sts	0x01E6, r24
		return E_OK;
    17ea:	1b 82       	std	Y+3, r1	; 0x03
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <__vector_2>:

/*ISR for INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt1NotifcationFunction != NULL)
    182a:	80 91 e6 01 	lds	r24, 0x01E6
    182e:	90 91 e7 01 	lds	r25, 0x01E7
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	29 f0       	breq	.+10     	; 0x1840 <__vector_2+0x40>
	{
		Global_pvInt1NotifcationFunction();
    1836:	e0 91 e6 01 	lds	r30, 0x01E6
    183a:	f0 91 e7 01 	lds	r31, 0x01E7
    183e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	bf 91       	pop	r27
    184a:	af 91       	pop	r26
    184c:	9f 91       	pop	r25
    184e:	8f 91       	pop	r24
    1850:	7f 91       	pop	r23
    1852:	6f 91       	pop	r22
    1854:	5f 91       	pop	r21
    1856:	4f 91       	pop	r20
    1858:	3f 91       	pop	r19
    185a:	2f 91       	pop	r18
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <EXTI_u8Int2SetCallBack+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	41 f0       	breq	.+16     	; 0x188e <EXTI_u8Int2SetCallBack+0x28>
	{
		Global_pvInt2NotifcationFunction = Copy_pvNotificationFunction;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	90 93 e9 01 	sts	0x01E9, r25
    1886:	80 93 e8 01 	sts	0x01E8, r24
		return E_OK;
    188a:	1b 82       	std	Y+3, r1	; 0x03
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <__vector_3>:

/*ISR for INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt2NotifcationFunction != NULL)
    18ca:	80 91 e8 01 	lds	r24, 0x01E8
    18ce:	90 91 e9 01 	lds	r25, 0x01E9
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	29 f0       	breq	.+10     	; 0x18e0 <__vector_3+0x40>
	{
		Global_pvInt2NotifcationFunction();
    18d6:	e0 91 e8 01 	lds	r30, 0x01E8
    18da:	f0 91 e9 01 	lds	r31, 0x01E9
    18de:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	bf 91       	pop	r27
    18ea:	af 91       	pop	r26
    18ec:	9f 91       	pop	r25
    18ee:	8f 91       	pop	r24
    18f0:	7f 91       	pop	r23
    18f2:	6f 91       	pop	r22
    18f4:	5f 91       	pop	r21
    18f6:	4f 91       	pop	r20
    18f8:	3f 91       	pop	r19
    18fa:	2f 91       	pop	r18
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <DIO_Vid_SetPinDirection>:



								/*Setting pin Direction*/
/*Setting pin direction, make a specific pin is an input(DDRX=0) or output(DDRX=1)*/
void DIO_Vid_SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	27 97       	sbiw	r28, 0x07	; 7
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	6a 83       	std	Y+2, r22	; 0x02
    191e:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Direction == input){
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 23       	and	r24, r24
    1924:	09 f0       	breq	.+2      	; 0x1928 <DIO_Vid_SetPinDirection+0x22>
    1926:	74 c0       	rjmp	.+232    	; 0x1a10 <DIO_Vid_SetPinDirection+0x10a>
		switch (Copy_u8Port){
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	3f 83       	std	Y+7, r19	; 0x07
    1930:	2e 83       	std	Y+6, r18	; 0x06
    1932:	8e 81       	ldd	r24, Y+6	; 0x06
    1934:	9f 81       	ldd	r25, Y+7	; 0x07
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	59 f1       	breq	.+86     	; 0x1992 <DIO_Vid_SetPinDirection+0x8c>
    193c:	2e 81       	ldd	r18, Y+6	; 0x06
    193e:	3f 81       	ldd	r19, Y+7	; 0x07
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	2c f4       	brge	.+10     	; 0x1950 <DIO_Vid_SetPinDirection+0x4a>
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	9f 81       	ldd	r25, Y+7	; 0x07
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f0       	breq	.+26     	; 0x1968 <DIO_Vid_SetPinDirection+0x62>
    194e:	d2 c0       	rjmp	.+420    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
    1950:	2e 81       	ldd	r18, Y+6	; 0x06
    1952:	3f 81       	ldd	r19, Y+7	; 0x07
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	89 f1       	breq	.+98     	; 0x19bc <DIO_Vid_SetPinDirection+0xb6>
    195a:	8e 81       	ldd	r24, Y+6	; 0x06
    195c:	9f 81       	ldd	r25, Y+7	; 0x07
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	91 05       	cpc	r25, r1
    1962:	09 f4       	brne	.+2      	; 0x1966 <DIO_Vid_SetPinDirection+0x60>
    1964:	40 c0       	rjmp	.+128    	; 0x19e6 <DIO_Vid_SetPinDirection+0xe0>
    1966:	c6 c0       	rjmp	.+396    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : CLR_BIT(DDRA , Copy_u8Pin); break;
    1968:	aa e3       	ldi	r26, 0x3A	; 58
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea e3       	ldi	r30, 0x3A	; 58
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_Vid_SetPinDirection+0x80>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_Vid_SetPinDirection+0x7c>
    198a:	80 95       	com	r24
    198c:	84 23       	and	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	b1 c0       	rjmp	.+354    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : CLR_BIT(DDRB , Copy_u8Pin); break;
    1992:	a7 e3       	ldi	r26, 0x37	; 55
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e7 e3       	ldi	r30, 0x37	; 55
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_Vid_SetPinDirection+0xaa>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <DIO_Vid_SetPinDirection+0xa6>
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	9c c0       	rjmp	.+312    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : CLR_BIT(DDRC , Copy_u8Pin); break;
    19bc:	a4 e3       	ldi	r26, 0x34	; 52
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e4 e3       	ldi	r30, 0x34	; 52
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_Vid_SetPinDirection+0xd4>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_Vid_SetPinDirection+0xd0>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	87 c0       	rjmp	.+270    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : CLR_BIT(DDRD , Copy_u8Pin); break;
    19e6:	a1 e3       	ldi	r26, 0x31	; 49
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e1 e3       	ldi	r30, 0x31	; 49
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_Vid_SetPinDirection+0xfe>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_Vid_SetPinDirection+0xfa>
    1a08:	80 95       	com	r24
    1a0a:	84 23       	and	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	72 c0       	rjmp	.+228    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>

		}
	}
	else if(Copy_u8Direction == output){
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <DIO_Vid_SetPinDirection+0x112>
    1a16:	6e c0       	rjmp	.+220    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
		switch (Copy_u8Port){
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3d 83       	std	Y+5, r19	; 0x05
    1a20:	2c 83       	std	Y+4, r18	; 0x04
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	49 f1       	breq	.+82     	; 0x1a7e <DIO_Vid_SetPinDirection+0x178>
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <DIO_Vid_SetPinDirection+0x13a>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <DIO_Vid_SetPinDirection+0x150>
    1a3e:	5a c0       	rjmp	.+180    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
    1a40:	2c 81       	ldd	r18, Y+4	; 0x04
    1a42:	3d 81       	ldd	r19, Y+5	; 0x05
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	71 f1       	breq	.+92     	; 0x1aa6 <DIO_Vid_SetPinDirection+0x1a0>
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	91 05       	cpc	r25, r1
    1a52:	e9 f1       	breq	.+122    	; 0x1ace <DIO_Vid_SetPinDirection+0x1c8>
    1a54:	4f c0       	rjmp	.+158    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : SET_BIT(DDRA , Copy_u8Pin); break;
    1a56:	aa e3       	ldi	r26, 0x3A	; 58
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ea e3       	ldi	r30, 0x3A	; 58
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_Vid_SetPinDirection+0x16e>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_Vid_SetPinDirection+0x16a>
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	3b c0       	rjmp	.+118    	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : SET_BIT(DDRB , Copy_u8Pin); break;
    1a7e:	a7 e3       	ldi	r26, 0x37	; 55
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e7 e3       	ldi	r30, 0x37	; 55
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_Vid_SetPinDirection+0x196>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_Vid_SetPinDirection+0x192>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	27 c0       	rjmp	.+78     	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : SET_BIT(DDRC , Copy_u8Pin); break;
    1aa6:	a4 e3       	ldi	r26, 0x34	; 52
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e4 e3       	ldi	r30, 0x34	; 52
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_Vid_SetPinDirection+0x1be>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_Vid_SetPinDirection+0x1ba>
    1ac8:	84 2b       	or	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : SET_BIT(DDRD , Copy_u8Pin); break;
    1ace:	a1 e3       	ldi	r26, 0x31	; 49
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e1 e3       	ldi	r30, 0x31	; 49
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <DIO_Vid_SetPinDirection+0x1e6>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <DIO_Vid_SetPinDirection+0x1e2>
    1af0:	84 2b       	or	r24, r20
    1af2:	8c 93       	st	X, r24

		}
	}

}
    1af4:	27 96       	adiw	r28, 0x07	; 7
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <DIO_Vid_SetPinValue>:

                         /*Setting pin Value*/
/*Setting pin value, give a special value(high=1 or low=0) to specific pin */
void DIO_Vid_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	27 97       	sbiw	r28, 0x07	; 7
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
    1b1e:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value == PinLow){
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	88 23       	and	r24, r24
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <DIO_Vid_SetPinValue+0x22>
    1b26:	74 c0       	rjmp	.+232    	; 0x1c10 <DIO_Vid_SetPinValue+0x10a>
		switch (Copy_u8Port){
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3f 83       	std	Y+7, r19	; 0x07
    1b30:	2e 83       	std	Y+6, r18	; 0x06
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	9f 81       	ldd	r25, Y+7	; 0x07
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	59 f1       	breq	.+86     	; 0x1b92 <DIO_Vid_SetPinValue+0x8c>
    1b3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <DIO_Vid_SetPinValue+0x4a>
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f0       	breq	.+26     	; 0x1b68 <DIO_Vid_SetPinValue+0x62>
    1b4e:	d2 c0       	rjmp	.+420    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
    1b50:	2e 81       	ldd	r18, Y+6	; 0x06
    1b52:	3f 81       	ldd	r19, Y+7	; 0x07
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	89 f1       	breq	.+98     	; 0x1bbc <DIO_Vid_SetPinValue+0xb6>
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <DIO_Vid_SetPinValue+0x60>
    1b64:	40 c0       	rjmp	.+128    	; 0x1be6 <DIO_Vid_SetPinValue+0xe0>
    1b66:	c6 c0       	rjmp	.+396    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : CLR_BIT(PORTA , Copy_u8Pin); break;
    1b68:	ab e3       	ldi	r26, 0x3B	; 59
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <DIO_Vid_SetPinValue+0x80>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <DIO_Vid_SetPinValue+0x7c>
    1b8a:	80 95       	com	r24
    1b8c:	84 23       	and	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	b1 c0       	rjmp	.+354    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : CLR_BIT(PORTB , Copy_u8Pin); break;
    1b92:	a8 e3       	ldi	r26, 0x38	; 56
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e8 e3       	ldi	r30, 0x38	; 56
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <DIO_Vid_SetPinValue+0xaa>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <DIO_Vid_SetPinValue+0xa6>
    1bb4:	80 95       	com	r24
    1bb6:	84 23       	and	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	9c c0       	rjmp	.+312    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : CLR_BIT(PORTC , Copy_u8Pin); break;
    1bbc:	a5 e3       	ldi	r26, 0x35	; 53
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e5 e3       	ldi	r30, 0x35	; 53
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_Vid_SetPinValue+0xd4>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_Vid_SetPinValue+0xd0>
    1bde:	80 95       	com	r24
    1be0:	84 23       	and	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	87 c0       	rjmp	.+270    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : CLR_BIT(PORTD , Copy_u8Pin); break;
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_Vid_SetPinValue+0xfe>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_Vid_SetPinValue+0xfa>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	72 c0       	rjmp	.+228    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>

		}
	}
	else if(Copy_u8Value == PinHigh){
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <DIO_Vid_SetPinValue+0x112>
    1c16:	6e c0       	rjmp	.+220    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
		switch (Copy_u8Port){
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3d 83       	std	Y+5, r19	; 0x05
    1c20:	2c 83       	std	Y+4, r18	; 0x04
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	49 f1       	breq	.+82     	; 0x1c7e <DIO_Vid_SetPinValue+0x178>
    1c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <DIO_Vid_SetPinValue+0x13a>
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <DIO_Vid_SetPinValue+0x150>
    1c3e:	5a c0       	rjmp	.+180    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
    1c40:	2c 81       	ldd	r18, Y+4	; 0x04
    1c42:	3d 81       	ldd	r19, Y+5	; 0x05
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	71 f1       	breq	.+92     	; 0x1ca6 <DIO_Vid_SetPinValue+0x1a0>
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	e9 f1       	breq	.+122    	; 0x1cce <DIO_Vid_SetPinValue+0x1c8>
    1c54:	4f c0       	rjmp	.+158    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : SET_BIT(PORTA , Copy_u8Pin); break;
    1c56:	ab e3       	ldi	r26, 0x3B	; 59
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	eb e3       	ldi	r30, 0x3B	; 59
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_Vid_SetPinValue+0x16e>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_Vid_SetPinValue+0x16a>
    1c78:	84 2b       	or	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	3b c0       	rjmp	.+118    	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : SET_BIT(PORTB , Copy_u8Pin); break;
    1c7e:	a8 e3       	ldi	r26, 0x38	; 56
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e8 e3       	ldi	r30, 0x38	; 56
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_Vid_SetPinValue+0x196>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_Vid_SetPinValue+0x192>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	27 c0       	rjmp	.+78     	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : SET_BIT(PORTC , Copy_u8Pin); break;
    1ca6:	a5 e3       	ldi	r26, 0x35	; 53
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e3       	ldi	r30, 0x35	; 53
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_Vid_SetPinValue+0x1be>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_Vid_SetPinValue+0x1ba>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	13 c0       	rjmp	.+38     	; 0x1cf4 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : SET_BIT(PORTD , Copy_u8Pin); break;
    1cce:	a2 e3       	ldi	r26, 0x32	; 50
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e2 e3       	ldi	r30, 0x32	; 50
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_Vid_SetPinValue+0x1e6>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_Vid_SetPinValue+0x1e2>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24

		}
	}
}
    1cf4:	27 96       	adiw	r28, 0x07	; 7
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <DIO_Vid_GetPinValue>:

						/*Getting pin Value*/
/*Getting pin value, check the value of specific pin and store this value into *Data (mostly used with switches)*/
void DIO_Vid_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *pu8Data){
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <DIO_Vid_GetPinValue+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <DIO_Vid_GetPinValue+0x8>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <DIO_Vid_GetPinValue+0xa>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	6a 83       	std	Y+2, r22	; 0x02
    1d18:	5c 83       	std	Y+4, r21	; 0x04
    1d1a:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	3e 83       	std	Y+6, r19	; 0x06
    1d24:	2d 83       	std	Y+5, r18	; 0x05
    1d26:	4d 81       	ldd	r20, Y+5	; 0x05
    1d28:	5e 81       	ldd	r21, Y+6	; 0x06
    1d2a:	41 30       	cpi	r20, 0x01	; 1
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	59 f1       	breq	.+86     	; 0x1d86 <DIO_Vid_GetPinValue+0x80>
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	91 05       	cpc	r25, r1
    1d38:	34 f4       	brge	.+12     	; 0x1d46 <DIO_Vid_GetPinValue+0x40>
    1d3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d3e:	21 15       	cp	r18, r1
    1d40:	31 05       	cpc	r19, r1
    1d42:	69 f0       	breq	.+26     	; 0x1d5e <DIO_Vid_GetPinValue+0x58>
    1d44:	5b c0       	rjmp	.+182    	; 0x1dfc <DIO_Vid_GetPinValue+0xf6>
    1d46:	4d 81       	ldd	r20, Y+5	; 0x05
    1d48:	5e 81       	ldd	r21, Y+6	; 0x06
    1d4a:	42 30       	cpi	r20, 0x02	; 2
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	79 f1       	breq	.+94     	; 0x1dae <DIO_Vid_GetPinValue+0xa8>
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <DIO_Vid_GetPinValue+0x56>
    1d5a:	3d c0       	rjmp	.+122    	; 0x1dd6 <DIO_Vid_GetPinValue+0xd0>
    1d5c:	4f c0       	rjmp	.+158    	; 0x1dfc <DIO_Vid_GetPinValue+0xf6>

		case Port_A : *pu8Data = GET_BIT(PINA , Copy_u8Pin); break;
    1d5e:	e9 e3       	ldi	r30, 0x39	; 57
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a9 01       	movw	r20, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_Vid_GetPinValue+0x70>
    1d72:	55 95       	asr	r21
    1d74:	47 95       	ror	r20
    1d76:	8a 95       	dec	r24
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_Vid_GetPinValue+0x6c>
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	81 70       	andi	r24, 0x01	; 1
    1d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d80:	fc 81       	ldd	r31, Y+4	; 0x04
    1d82:	80 83       	st	Z, r24
    1d84:	3b c0       	rjmp	.+118    	; 0x1dfc <DIO_Vid_GetPinValue+0xf6>
		case Port_B : *pu8Data = GET_BIT(PINB , Copy_u8Pin); break;
    1d86:	e6 e3       	ldi	r30, 0x36	; 54
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_Vid_GetPinValue+0x98>
    1d9a:	55 95       	asr	r21
    1d9c:	47 95       	ror	r20
    1d9e:	8a 95       	dec	r24
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <DIO_Vid_GetPinValue+0x94>
    1da2:	ca 01       	movw	r24, r20
    1da4:	81 70       	andi	r24, 0x01	; 1
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	80 83       	st	Z, r24
    1dac:	27 c0       	rjmp	.+78     	; 0x1dfc <DIO_Vid_GetPinValue+0xf6>
		case Port_C : *pu8Data = GET_BIT(PINC , Copy_u8Pin); break;
    1dae:	e3 e3       	ldi	r30, 0x33	; 51
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_Vid_GetPinValue+0xc0>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_Vid_GetPinValue+0xbc>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	80 83       	st	Z, r24
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <DIO_Vid_GetPinValue+0xf6>
		case Port_D : *pu8Data = GET_BIT(PIND , Copy_u8Pin); break;
    1dd6:	e0 e3       	ldi	r30, 0x30	; 48
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_Vid_GetPinValue+0xe8>
    1dea:	55 95       	asr	r21
    1dec:	47 95       	ror	r20
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_Vid_GetPinValue+0xe4>
    1df2:	ca 01       	movw	r24, r20
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	eb 81       	ldd	r30, Y+3	; 0x03
    1df8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfa:	80 83       	st	Z, r24
	}
}
    1dfc:	26 96       	adiw	r28, 0x06	; 6
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <DIO_Vid_SetPortDirection>:



										/*Setting port Direction*/
/*Setting Port direction register, make the whole port output all bits are ones or input all bits are zeros*/
void DIO_Vid_SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <DIO_Vid_SetPortDirection+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <DIO_Vid_SetPortDirection+0x8>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <DIO_Vid_SetPortDirection+0xa>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Direction == output){
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	99 f5       	brne	.+102    	; 0x1e8c <DIO_Vid_SetPortDirection+0x7e>
			switch (Copy_u8Port){
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3e 83       	std	Y+6, r19	; 0x06
    1e2e:	2d 83       	std	Y+5, r18	; 0x05
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	d1 f0       	breq	.+52     	; 0x1e6e <DIO_Vid_SetPortDirection+0x60>
    1e3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <DIO_Vid_SetPortDirection+0x40>
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	61 f0       	breq	.+24     	; 0x1e64 <DIO_Vid_SetPortDirection+0x56>
    1e4c:	50 c0       	rjmp	.+160    	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
    1e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e50:	3e 81       	ldd	r19, Y+6	; 0x06
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <DIO_Vid_SetPortDirection+0x6a>
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	81 f0       	breq	.+32     	; 0x1e82 <DIO_Vid_SetPortDirection+0x74>
    1e62:	45 c0       	rjmp	.+138    	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b11111111; break;
    1e64:	ea e3       	ldi	r30, 0x3A	; 58
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	80 83       	st	Z, r24
    1e6c:	40 c0       	rjmp	.+128    	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b11111111; break;
    1e6e:	e7 e3       	ldi	r30, 0x37	; 55
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	80 83       	st	Z, r24
    1e76:	3b c0       	rjmp	.+118    	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b11111111; break;
    1e78:	e4 e3       	ldi	r30, 0x34	; 52
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
    1e80:	36 c0       	rjmp	.+108    	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b11111111; break;
    1e82:	e1 e3       	ldi	r30, 0x31	; 49
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	80 83       	st	Z, r24
    1e8a:	31 c0       	rjmp	.+98     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>

			}
		}
		else if(Copy_u8Direction == input){
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	88 23       	and	r24, r24
    1e90:	71 f5       	brne	.+92     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
			switch (Copy_u8Port){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3c 83       	std	Y+4, r19	; 0x04
    1e9a:	2b 83       	std	Y+3, r18	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	c9 f0       	breq	.+50     	; 0x1ed8 <DIO_Vid_SetPortDirection+0xca>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	2c f4       	brge	.+10     	; 0x1eba <DIO_Vid_SetPortDirection+0xac>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <DIO_Vid_SetPortDirection+0xc2>
    1eb8:	1a c0       	rjmp	.+52     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	71 f0       	breq	.+28     	; 0x1ee0 <DIO_Vid_SetPortDirection+0xd2>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	69 f0       	breq	.+26     	; 0x1ee8 <DIO_Vid_SetPortDirection+0xda>
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b00000000; break;
    1ed0:	ea e3       	ldi	r30, 0x3A	; 58
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	10 82       	st	Z, r1
    1ed6:	0b c0       	rjmp	.+22     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b00000000; break;
    1ed8:	e7 e3       	ldi	r30, 0x37	; 55
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b00000000; break;
    1ee0:	e4 e3       	ldi	r30, 0x34	; 52
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	10 82       	st	Z, r1
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b00000000; break;
    1ee8:	e1 e3       	ldi	r30, 0x31	; 49
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	10 82       	st	Z, r1

			}
		}
}
    1eee:	26 96       	adiw	r28, 0x06	; 6
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <DIO_Vid_SetPortValue>:


						/*Setting port(port register) value*/
void DIO_Vid_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_Vid_SetPortValue+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <DIO_Vid_SetPortValue+0x8>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3c 83       	std	Y+4, r19	; 0x04
    1f18:	2b 83       	std	Y+3, r18	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	d1 f0       	breq	.+52     	; 0x1f58 <DIO_Vid_SetPortValue+0x58>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <DIO_Vid_SetPortValue+0x38>
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <DIO_Vid_SetPortValue+0x4e>
    1f36:	1e c0       	rjmp	.+60     	; 0x1f74 <DIO_Vid_SetPortValue+0x74>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	81 f0       	breq	.+32     	; 0x1f62 <DIO_Vid_SetPortValue+0x62>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 05       	cpc	r25, r1
    1f4a:	81 f0       	breq	.+32     	; 0x1f6c <DIO_Vid_SetPortValue+0x6c>
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <DIO_Vid_SetPortValue+0x74>

			case Port_A :   PORTA = Copy_u8Value; break;
    1f4e:	eb e3       	ldi	r30, 0x3B	; 59
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	80 83       	st	Z, r24
    1f56:	0e c0       	rjmp	.+28     	; 0x1f74 <DIO_Vid_SetPortValue+0x74>
			case Port_B :   PORTB = Copy_u8Value; break;
    1f58:	e8 e3       	ldi	r30, 0x38	; 56
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	80 83       	st	Z, r24
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <DIO_Vid_SetPortValue+0x74>
			case Port_C :   PORTC = Copy_u8Value; break;
    1f62:	e5 e3       	ldi	r30, 0x35	; 53
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	80 83       	st	Z, r24
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <DIO_Vid_SetPortValue+0x74>
			case Port_D :   PORTD = Copy_u8Value; break;
    1f6c:	e2 e3       	ldi	r30, 0x32	; 50
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	80 83       	st	Z, r24
		}
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <DIO_Vid_GetPportValue>:


						/*Getting port(PIN register) value*/
/*Getting port value, check the value of specific port and store this value into *Data */
void DIO_Vid_GetPportValue(u8 Copy_u8Port, u8 *pu8Data){
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <DIO_Vid_GetPportValue+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <DIO_Vid_GetPportValue+0x8>
    1f8a:	0f 92       	push	r0
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	7b 83       	std	Y+3, r23	; 0x03
    1f94:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	3d 83       	std	Y+5, r19	; 0x05
    1f9e:	2c 83       	std	Y+4, r18	; 0x04
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	e1 f0       	breq	.+56     	; 0x1fe2 <DIO_Vid_GetPportValue+0x60>
    1faa:	2c 81       	ldd	r18, Y+4	; 0x04
    1fac:	3d 81       	ldd	r19, Y+5	; 0x05
    1fae:	22 30       	cpi	r18, 0x02	; 2
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <DIO_Vid_GetPportValue+0x3c>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <DIO_Vid_GetPportValue+0x52>
    1fbc:	26 c0       	rjmp	.+76     	; 0x200a <DIO_Vid_GetPportValue+0x88>
    1fbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	a1 f0       	breq	.+40     	; 0x1ff0 <DIO_Vid_GetPportValue+0x6e>
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	91 05       	cpc	r25, r1
    1fd0:	b1 f0       	breq	.+44     	; 0x1ffe <DIO_Vid_GetPportValue+0x7c>
    1fd2:	1b c0       	rjmp	.+54     	; 0x200a <DIO_Vid_GetPportValue+0x88>

			case Port_A : *pu8Data = PORTA; break;
    1fd4:	eb e3       	ldi	r30, 0x3B	; 59
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	ea 81       	ldd	r30, Y+2	; 0x02
    1fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fde:	80 83       	st	Z, r24
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <DIO_Vid_GetPportValue+0x88>
			case Port_B : *pu8Data = PORTB; break;
    1fe2:	e8 e3       	ldi	r30, 0x38	; 56
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fea:	fb 81       	ldd	r31, Y+3	; 0x03
    1fec:	80 83       	st	Z, r24
    1fee:	0d c0       	rjmp	.+26     	; 0x200a <DIO_Vid_GetPportValue+0x88>
			case Port_C : *pu8Data = PORTC; break;
    1ff0:	e5 e3       	ldi	r30, 0x35	; 53
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffa:	80 83       	st	Z, r24
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <DIO_Vid_GetPportValue+0x88>
			case Port_D : *pu8Data = PORTD; break;
    1ffe:	e2 e3       	ldi	r30, 0x32	; 50
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	ea 81       	ldd	r30, Y+2	; 0x02
    2006:	fb 81       	ldd	r31, Y+3	; 0x03
    2008:	80 83       	st	Z, r24
		}

}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <DIO_ConnectedPullUp>:

void DIO_ConnectedPullUp(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8ConnectedPullup){
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <DIO_ConnectedPullUp+0x6>
    2020:	0f 92       	push	r0
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	6a 83       	std	Y+2, r22	; 0x02
    202a:	4b 83       	std	Y+3, r20	; 0x03

}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <ADC_voidInit>:
#include "ADC_Private.h"


/******************FUNCTIONS DEFINITIONS*****************/
void ADC_voidInit(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
#elif ADC_REF_SELECTION == AVCC
	SET_BIT(ADMUX, REFS0);
	CLR_BIT(ADMUX, REFS1);

#elif ADC_REF_SELECTION == VOLT_2_56
	SET_BIT(ADMUX, REFS0);
    2040:	a7 e2       	ldi	r26, 0x27	; 39
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e7 e2       	ldi	r30, 0x27	; 39
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 64       	ori	r24, 0x40	; 64
    204c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS1);
    204e:	a7 e2       	ldi	r26, 0x27	; 39
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e2       	ldi	r30, 0x27	; 39
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 68       	ori	r24, 0x80	; 128
    205a:	8c 93       	st	X, r24

#endif

	/***************Challenge: Make configurations***************/
	/*clear ADLAR bit, so the first 8-bits will return in ADCL, and last 2-bits in ADCH*/
	CLR_BIT(ADMUX, ADLAR);
    205c:	a7 e2       	ldi	r26, 0x27	; 39
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e7 e2       	ldi	r30, 0x27	; 39
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8f 7d       	andi	r24, 0xDF	; 223
    2068:	8c 93       	st	X, r24
	/*clear AUTO trigger ADC, so the ADC conversion will start only when you call:  ADC_convert_read() */
	CLR_BIT(ADCSRA, ADATE);
    206a:	a6 e2       	ldi	r26, 0x26	; 38
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e2       	ldi	r30, 0x26	; 38
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7d       	andi	r24, 0xDF	; 223
    2076:	8c 93       	st	X, r24
	/*disable ADC interrupt: */
	CLR_BIT(ADCSRA, ADIE);
    2078:	a6 e2       	ldi	r26, 0x26	; 38
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e6 e2       	ldi	r30, 0x26	; 38
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	8c 93       	st	X, r24
	/*set pre-scaler to be: (F_CPU/64) = (8000000/64) = 125 KHz */
	CLR_BIT(ADCSRA, ADPS0);
    2086:	a6 e2       	ldi	r26, 0x26	; 38
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e6 e2       	ldi	r30, 0x26	; 38
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8e 7f       	andi	r24, 0xFE	; 254
    2092:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    2094:	a6 e2       	ldi	r26, 0x26	; 38
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e6 e2       	ldi	r30, 0x26	; 38
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	82 60       	ori	r24, 0x02	; 2
    20a0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    20a2:	a6 e2       	ldi	r26, 0x26	; 38
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e2       	ldi	r30, 0x26	; 38
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	84 60       	ori	r24, 0x04	; 4
    20ae:	8c 93       	st	X, r24

	/*enable ADC peripheral in MCU*/
	SET_BIT(ADCSRA, ADEN);
    20b0:	a6 e2       	ldi	r26, 0x26	; 38
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e2       	ldi	r30, 0x26	; 38
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 68       	ori	r24, 0x80	; 128
    20bc:	8c 93       	st	X, r24
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <ADC_u16GetConversionReading>:



u16 ADC_u16GetConversionReading(u8 copy_u8Channel)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <ADC_u16GetConversionReading+0x6>
    20ca:	0f 92       	push	r0
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_data = 0;
    20d2:	1a 82       	std	Y+2, r1	; 0x02
    20d4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Channel == CHANNEL0)
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	09 f0       	breq	.+2      	; 0x20de <ADC_u16GetConversionReading+0x1a>
    20dc:	4d c0       	rjmp	.+154    	; 0x2178 <ADC_u16GetConversionReading+0xb4>
	{
		/*select input channel to pin PA0*/
		CLR_BIT(ADMUX, MUX0);
    20de:	a7 e2       	ldi	r26, 0x27	; 39
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e7 e2       	ldi	r30, 0x27	; 39
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    20ec:	a7 e2       	ldi	r26, 0x27	; 39
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e7 e2       	ldi	r30, 0x27	; 39
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8d 7f       	andi	r24, 0xFD	; 253
    20f8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    20fa:	a7 e2       	ldi	r26, 0x27	; 39
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e2       	ldi	r30, 0x27	; 39
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8b 7f       	andi	r24, 0xFB	; 251
    2106:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    2108:	a7 e2       	ldi	r26, 0x27	; 39
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e7 e2       	ldi	r30, 0x27	; 39
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	87 7f       	andi	r24, 0xF7	; 247
    2114:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    2116:	a7 e2       	ldi	r26, 0x27	; 39
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e7 e2       	ldi	r30, 0x27	; 39
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 7e       	andi	r24, 0xEF	; 239
    2122:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    2124:	a6 e2       	ldi	r26, 0x26	; 38
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e6 e2       	ldi	r30, 0x26	; 38
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 64       	ori	r24, 0x40	; 64
    2130:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 95       	swap	r24
    213a:	86 95       	lsr	r24
    213c:	86 95       	lsr	r24
    213e:	83 70       	andi	r24, 0x03	; 3
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	81 70       	andi	r24, 0x01	; 1
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	88 23       	and	r24, r24
    214a:	99 f7       	brne	.-26     	; 0x2132 <ADC_u16GetConversionReading+0x6e>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    214c:	e4 e2       	ldi	r30, 0x24	; 36
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    215a:	e5 e2       	ldi	r30, 0x25	; 37
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	98 2f       	mov	r25, r24
    2166:	88 27       	eor	r24, r24
    2168:	9c 01       	movw	r18, r24
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	82 2b       	or	r24, r18
    2170:	93 2b       	or	r25, r19
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	36 c2       	rjmp	.+1132   	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL1)
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	82 30       	cpi	r24, 0x02	; 2
    217c:	09 f0       	breq	.+2      	; 0x2180 <ADC_u16GetConversionReading+0xbc>
    217e:	4d c0       	rjmp	.+154    	; 0x221a <ADC_u16GetConversionReading+0x156>
	{
		/*select input channel to pin PA1*/
		SET_BIT(ADMUX, MUX0);
    2180:	a7 e2       	ldi	r26, 0x27	; 39
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e7 e2       	ldi	r30, 0x27	; 39
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    218e:	a7 e2       	ldi	r26, 0x27	; 39
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e7 e2       	ldi	r30, 0x27	; 39
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8d 7f       	andi	r24, 0xFD	; 253
    219a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    219c:	a7 e2       	ldi	r26, 0x27	; 39
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e7 e2       	ldi	r30, 0x27	; 39
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8b 7f       	andi	r24, 0xFB	; 251
    21a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    21aa:	a7 e2       	ldi	r26, 0x27	; 39
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e7 e2       	ldi	r30, 0x27	; 39
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	87 7f       	andi	r24, 0xF7	; 247
    21b6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    21b8:	a7 e2       	ldi	r26, 0x27	; 39
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e7 e2       	ldi	r30, 0x27	; 39
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 7e       	andi	r24, 0xEF	; 239
    21c4:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    21c6:	a6 e2       	ldi	r26, 0x26	; 38
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e6 e2       	ldi	r30, 0x26	; 38
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 64       	ori	r24, 0x40	; 64
    21d2:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    21d4:	e6 e2       	ldi	r30, 0x26	; 38
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	82 95       	swap	r24
    21dc:	86 95       	lsr	r24
    21de:	86 95       	lsr	r24
    21e0:	83 70       	andi	r24, 0x03	; 3
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	81 70       	andi	r24, 0x01	; 1
    21e8:	90 70       	andi	r25, 0x00	; 0
    21ea:	88 23       	and	r24, r24
    21ec:	99 f7       	brne	.-26     	; 0x21d4 <ADC_u16GetConversionReading+0x110>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    21ee:	e4 e2       	ldi	r30, 0x24	; 36
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    21fc:	e5 e2       	ldi	r30, 0x25	; 37
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	98 2f       	mov	r25, r24
    2208:	88 27       	eor	r24, r24
    220a:	9c 01       	movw	r18, r24
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	82 2b       	or	r24, r18
    2212:	93 2b       	or	r25, r19
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	e5 c1       	rjmp	.+970    	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL2)
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	09 f0       	breq	.+2      	; 0x2222 <ADC_u16GetConversionReading+0x15e>
    2220:	4d c0       	rjmp	.+154    	; 0x22bc <ADC_u16GetConversionReading+0x1f8>
	{
		/*select input channel to pin PA2*/
		CLR_BIT(ADMUX, MUX0);
    2222:	a7 e2       	ldi	r26, 0x27	; 39
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e7 e2       	ldi	r30, 0x27	; 39
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8e 7f       	andi	r24, 0xFE	; 254
    222e:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    2230:	a7 e2       	ldi	r26, 0x27	; 39
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e7 e2       	ldi	r30, 0x27	; 39
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    223e:	a7 e2       	ldi	r26, 0x27	; 39
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e7 e2       	ldi	r30, 0x27	; 39
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8b 7f       	andi	r24, 0xFB	; 251
    224a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    224c:	a7 e2       	ldi	r26, 0x27	; 39
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e7 e2       	ldi	r30, 0x27	; 39
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	87 7f       	andi	r24, 0xF7	; 247
    2258:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    225a:	a7 e2       	ldi	r26, 0x27	; 39
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e7 e2       	ldi	r30, 0x27	; 39
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8f 7e       	andi	r24, 0xEF	; 239
    2266:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    2268:	a6 e2       	ldi	r26, 0x26	; 38
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e6 e2       	ldi	r30, 0x26	; 38
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	80 64       	ori	r24, 0x40	; 64
    2274:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    2276:	e6 e2       	ldi	r30, 0x26	; 38
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	82 95       	swap	r24
    227e:	86 95       	lsr	r24
    2280:	86 95       	lsr	r24
    2282:	83 70       	andi	r24, 0x03	; 3
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	90 70       	andi	r25, 0x00	; 0
    228c:	88 23       	and	r24, r24
    228e:	99 f7       	brne	.-26     	; 0x2276 <ADC_u16GetConversionReading+0x1b2>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    2290:	e4 e2       	ldi	r30, 0x24	; 36
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    229e:	e5 e2       	ldi	r30, 0x25	; 37
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 2f       	mov	r25, r24
    22aa:	88 27       	eor	r24, r24
    22ac:	9c 01       	movw	r18, r24
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	82 2b       	or	r24, r18
    22b4:	93 2b       	or	r25, r19
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	94 c1       	rjmp	.+808    	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL3)
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	84 30       	cpi	r24, 0x04	; 4
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <ADC_u16GetConversionReading+0x200>
    22c2:	4d c0       	rjmp	.+154    	; 0x235e <ADC_u16GetConversionReading+0x29a>
	{

		/*select input channel to pin PA3*/
		SET_BIT(ADMUX, MUX0);
    22c4:	a7 e2       	ldi	r26, 0x27	; 39
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e7 e2       	ldi	r30, 0x27	; 39
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	81 60       	ori	r24, 0x01	; 1
    22d0:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    22d2:	a7 e2       	ldi	r26, 0x27	; 39
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e7 e2       	ldi	r30, 0x27	; 39
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	82 60       	ori	r24, 0x02	; 2
    22de:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    22e0:	a7 e2       	ldi	r26, 0x27	; 39
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e7 e2       	ldi	r30, 0x27	; 39
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8b 7f       	andi	r24, 0xFB	; 251
    22ec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    22ee:	a7 e2       	ldi	r26, 0x27	; 39
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e7 e2       	ldi	r30, 0x27	; 39
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	87 7f       	andi	r24, 0xF7	; 247
    22fa:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    22fc:	a7 e2       	ldi	r26, 0x27	; 39
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e7 e2       	ldi	r30, 0x27	; 39
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8f 7e       	andi	r24, 0xEF	; 239
    2308:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    230a:	a6 e2       	ldi	r26, 0x26	; 38
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e6 e2       	ldi	r30, 0x26	; 38
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 64       	ori	r24, 0x40	; 64
    2316:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    2318:	e6 e2       	ldi	r30, 0x26	; 38
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	82 95       	swap	r24
    2320:	86 95       	lsr	r24
    2322:	86 95       	lsr	r24
    2324:	83 70       	andi	r24, 0x03	; 3
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	81 70       	andi	r24, 0x01	; 1
    232c:	90 70       	andi	r25, 0x00	; 0
    232e:	88 23       	and	r24, r24
    2330:	99 f7       	brne	.-26     	; 0x2318 <ADC_u16GetConversionReading+0x254>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    2332:	e4 e2       	ldi	r30, 0x24	; 36
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    2340:	e5 e2       	ldi	r30, 0x25	; 37
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	98 2f       	mov	r25, r24
    234c:	88 27       	eor	r24, r24
    234e:	9c 01       	movw	r18, r24
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	82 2b       	or	r24, r18
    2356:	93 2b       	or	r25, r19
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	43 c1       	rjmp	.+646    	; 0x25e4 <ADC_u16GetConversionReading+0x520>

	}

	else if(copy_u8Channel == CHANNEL4)
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	85 30       	cpi	r24, 0x05	; 5
    2362:	09 f0       	breq	.+2      	; 0x2366 <ADC_u16GetConversionReading+0x2a2>
    2364:	4d c0       	rjmp	.+154    	; 0x2400 <ADC_u16GetConversionReading+0x33c>
	{
		/*select input channel to pin PA4*/
		CLR_BIT(ADMUX, MUX0);
    2366:	a7 e2       	ldi	r26, 0x27	; 39
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e7 e2       	ldi	r30, 0x27	; 39
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	8e 7f       	andi	r24, 0xFE	; 254
    2372:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    2374:	a7 e2       	ldi	r26, 0x27	; 39
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e7 e2       	ldi	r30, 0x27	; 39
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8d 7f       	andi	r24, 0xFD	; 253
    2380:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    2382:	a7 e2       	ldi	r26, 0x27	; 39
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e7 e2       	ldi	r30, 0x27	; 39
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	84 60       	ori	r24, 0x04	; 4
    238e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    2390:	a7 e2       	ldi	r26, 0x27	; 39
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e7 e2       	ldi	r30, 0x27	; 39
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	87 7f       	andi	r24, 0xF7	; 247
    239c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    239e:	a7 e2       	ldi	r26, 0x27	; 39
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e7 e2       	ldi	r30, 0x27	; 39
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	8f 7e       	andi	r24, 0xEF	; 239
    23aa:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    23ac:	a6 e2       	ldi	r26, 0x26	; 38
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e6 e2       	ldi	r30, 0x26	; 38
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 64       	ori	r24, 0x40	; 64
    23b8:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    23ba:	e6 e2       	ldi	r30, 0x26	; 38
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	82 95       	swap	r24
    23c2:	86 95       	lsr	r24
    23c4:	86 95       	lsr	r24
    23c6:	83 70       	andi	r24, 0x03	; 3
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	81 70       	andi	r24, 0x01	; 1
    23ce:	90 70       	andi	r25, 0x00	; 0
    23d0:	88 23       	and	r24, r24
    23d2:	99 f7       	brne	.-26     	; 0x23ba <ADC_u16GetConversionReading+0x2f6>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    23d4:	e4 e2       	ldi	r30, 0x24	; 36
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    23e2:	e5 e2       	ldi	r30, 0x25	; 37
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	98 2f       	mov	r25, r24
    23ee:	88 27       	eor	r24, r24
    23f0:	9c 01       	movw	r18, r24
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	82 2b       	or	r24, r18
    23f8:	93 2b       	or	r25, r19
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	f2 c0       	rjmp	.+484    	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL5)
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	86 30       	cpi	r24, 0x06	; 6
    2404:	09 f0       	breq	.+2      	; 0x2408 <ADC_u16GetConversionReading+0x344>
    2406:	4d c0       	rjmp	.+154    	; 0x24a2 <ADC_u16GetConversionReading+0x3de>
	{

		/*select input channel to pin PA5*/
		SET_BIT(ADMUX, MUX0);
    2408:	a7 e2       	ldi	r26, 0x27	; 39
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e2       	ldi	r30, 0x27	; 39
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	81 60       	ori	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    2416:	a7 e2       	ldi	r26, 0x27	; 39
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e7 e2       	ldi	r30, 0x27	; 39
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8d 7f       	andi	r24, 0xFD	; 253
    2422:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    2424:	a7 e2       	ldi	r26, 0x27	; 39
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e7 e2       	ldi	r30, 0x27	; 39
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	84 60       	ori	r24, 0x04	; 4
    2430:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    2432:	a7 e2       	ldi	r26, 0x27	; 39
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e7 e2       	ldi	r30, 0x27	; 39
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	87 7f       	andi	r24, 0xF7	; 247
    243e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    2440:	a7 e2       	ldi	r26, 0x27	; 39
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e7 e2       	ldi	r30, 0x27	; 39
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	8f 7e       	andi	r24, 0xEF	; 239
    244c:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    244e:	a6 e2       	ldi	r26, 0x26	; 38
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e6 e2       	ldi	r30, 0x26	; 38
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 64       	ori	r24, 0x40	; 64
    245a:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    245c:	e6 e2       	ldi	r30, 0x26	; 38
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	82 95       	swap	r24
    2464:	86 95       	lsr	r24
    2466:	86 95       	lsr	r24
    2468:	83 70       	andi	r24, 0x03	; 3
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	81 70       	andi	r24, 0x01	; 1
    2470:	90 70       	andi	r25, 0x00	; 0
    2472:	88 23       	and	r24, r24
    2474:	99 f7       	brne	.-26     	; 0x245c <ADC_u16GetConversionReading+0x398>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    2476:	e4 e2       	ldi	r30, 0x24	; 36
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    2484:	e5 e2       	ldi	r30, 0x25	; 37
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	98 2f       	mov	r25, r24
    2490:	88 27       	eor	r24, r24
    2492:	9c 01       	movw	r18, r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	82 2b       	or	r24, r18
    249a:	93 2b       	or	r25, r19
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	a1 c0       	rjmp	.+322    	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL6)
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	87 30       	cpi	r24, 0x07	; 7
    24a6:	09 f0       	breq	.+2      	; 0x24aa <ADC_u16GetConversionReading+0x3e6>
    24a8:	4d c0       	rjmp	.+154    	; 0x2544 <ADC_u16GetConversionReading+0x480>
	{

		/*select input channel to pin PA6*/
		CLR_BIT(ADMUX, MUX0);
    24aa:	a7 e2       	ldi	r26, 0x27	; 39
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e7 e2       	ldi	r30, 0x27	; 39
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8e 7f       	andi	r24, 0xFE	; 254
    24b6:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    24b8:	a7 e2       	ldi	r26, 0x27	; 39
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e2       	ldi	r30, 0x27	; 39
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	82 60       	ori	r24, 0x02	; 2
    24c4:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    24c6:	a7 e2       	ldi	r26, 0x27	; 39
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e7 e2       	ldi	r30, 0x27	; 39
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	84 60       	ori	r24, 0x04	; 4
    24d2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    24d4:	a7 e2       	ldi	r26, 0x27	; 39
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e7 e2       	ldi	r30, 0x27	; 39
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	87 7f       	andi	r24, 0xF7	; 247
    24e0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    24e2:	a7 e2       	ldi	r26, 0x27	; 39
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e7 e2       	ldi	r30, 0x27	; 39
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7e       	andi	r24, 0xEF	; 239
    24ee:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    24f0:	a6 e2       	ldi	r26, 0x26	; 38
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e6 e2       	ldi	r30, 0x26	; 38
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	80 64       	ori	r24, 0x40	; 64
    24fc:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    24fe:	e6 e2       	ldi	r30, 0x26	; 38
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	82 95       	swap	r24
    2506:	86 95       	lsr	r24
    2508:	86 95       	lsr	r24
    250a:	83 70       	andi	r24, 0x03	; 3
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	81 70       	andi	r24, 0x01	; 1
    2512:	90 70       	andi	r25, 0x00	; 0
    2514:	88 23       	and	r24, r24
    2516:	99 f7       	brne	.-26     	; 0x24fe <ADC_u16GetConversionReading+0x43a>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    2518:	e4 e2       	ldi	r30, 0x24	; 36
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    2526:	e5 e2       	ldi	r30, 0x25	; 37
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	98 2f       	mov	r25, r24
    2532:	88 27       	eor	r24, r24
    2534:	9c 01       	movw	r18, r24
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	82 2b       	or	r24, r18
    253c:	93 2b       	or	r25, r19
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	50 c0       	rjmp	.+160    	; 0x25e4 <ADC_u16GetConversionReading+0x520>

	}
	else if(copy_u8Channel == CHANNEL7)
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	88 30       	cpi	r24, 0x08	; 8
    2548:	09 f0       	breq	.+2      	; 0x254c <ADC_u16GetConversionReading+0x488>
    254a:	4c c0       	rjmp	.+152    	; 0x25e4 <ADC_u16GetConversionReading+0x520>
	{

		/*select input channel to pin PA7*/
		SET_BIT(ADMUX, MUX0);
    254c:	a7 e2       	ldi	r26, 0x27	; 39
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e7 e2       	ldi	r30, 0x27	; 39
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	81 60       	ori	r24, 0x01	; 1
    2558:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    255a:	a7 e2       	ldi	r26, 0x27	; 39
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e7 e2       	ldi	r30, 0x27	; 39
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	82 60       	ori	r24, 0x02	; 2
    2566:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    2568:	a7 e2       	ldi	r26, 0x27	; 39
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e7 e2       	ldi	r30, 0x27	; 39
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	84 60       	ori	r24, 0x04	; 4
    2574:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    2576:	a7 e2       	ldi	r26, 0x27	; 39
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e7 e2       	ldi	r30, 0x27	; 39
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	87 7f       	andi	r24, 0xF7	; 247
    2582:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    2584:	a7 e2       	ldi	r26, 0x27	; 39
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e7 e2       	ldi	r30, 0x27	; 39
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 7e       	andi	r24, 0xEF	; 239
    2590:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    2592:	a6 e2       	ldi	r26, 0x26	; 38
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e6 e2       	ldi	r30, 0x26	; 38
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 64       	ori	r24, 0x40	; 64
    259e:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(GET_BIT(ADCSRA, ADSC) == 1)
    25a0:	e6 e2       	ldi	r30, 0x26	; 38
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	82 95       	swap	r24
    25a8:	86 95       	lsr	r24
    25aa:	86 95       	lsr	r24
    25ac:	83 70       	andi	r24, 0x03	; 3
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	81 70       	andi	r24, 0x01	; 1
    25b4:	90 70       	andi	r25, 0x00	; 0
    25b6:	88 23       	and	r24, r24
    25b8:	99 f7       	brne	.-26     	; 0x25a0 <ADC_u16GetConversionReading+0x4dc>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    25ba:	e4 e2       	ldi	r30, 0x24	; 36
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    25c8:	e5 e2       	ldi	r30, 0x25	; 37
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	98 2f       	mov	r25, r24
    25d4:	88 27       	eor	r24, r24
    25d6:	9c 01       	movw	r18, r24
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	82 2b       	or	r24, r18
    25de:	93 2b       	or	r25, r19
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*return ADC data*/
	return ADC_data;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LM35_voidInit>:


/***********FUNCTIONS DEFINITIONS*********/

void LM35_voidInit(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    25fc:	0e 94 1c 10 	call	0x2038	; 0x2038 <ADC_voidInit>
}
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <LM35_u16GetTempReading>:


u16 LM35_u16GetTempReading(u8 u8_LMChannel)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LM35_u16GetTempReading+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <LM35_u16GetTempReading+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8d 83       	std	Y+5, r24	; 0x05
	u16 Local_u16TempValueDigital = 0;
    2616:	1c 82       	std	Y+4, r1	; 0x04
    2618:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16TempValueAnalog = 0;
    261a:	1a 82       	std	Y+2, r1	; 0x02
    261c:	19 82       	std	Y+1, r1	; 0x01

	/*ADC conversion*/
	Local_u16TempValueDigital = ADC_u16GetConversionReading(u8_LMChannel);
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	0e 94 62 10 	call	0x20c4	; 0x20c4 <ADC_u16GetConversionReading>
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
#if ADC_REF_SEL == AVCC
	Local_u16TempValueAnalog = (Local_u16TempValueDigital*0.48828125);


#elif ADC_REF_SEL == VOLT_2_56
	Local_u16TempValueAnalog = (Local_u16TempValueDigital*0.25);
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	cc 01       	movw	r24, r24
    262e:	a0 e0       	ldi	r26, 0x00	; 0
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5e e3       	ldi	r21, 0x3E	; 62
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
#error "ADC_REF_SEL error configuration parameter!"

#endif


	return Local_u16TempValueAnalog;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LCD_vid_SendData>:
#include "LCD_Interface.h"
#include "LCD_Private.h"



void LCD_vid_SendData(u8 Copy_u8Data){
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	2f 97       	sbiw	r28, 0x0f	; 15
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinHigh);    //RS=1        DATA SHEAT
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	65 e0       	ldi	r22, 0x05	; 5
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);     //RW=0
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	66 e0       	ldi	r22, 0x06	; 6
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Data);
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    26a4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);     //E=1&0
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	67 e0       	ldi	r22, 0x07	; 7
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e4       	ldi	r26, 0x40	; 64
    26b8:	b0 e4       	ldi	r27, 0x40	; 64
    26ba:	8b 87       	std	Y+11, r24	; 0x0b
    26bc:	9c 87       	std	Y+12, r25	; 0x0c
    26be:	ad 87       	std	Y+13, r26	; 0x0d
    26c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8f 83       	std	Y+7, r24	; 0x07
    26dc:	98 87       	std	Y+8, r25	; 0x08
    26de:	a9 87       	std	Y+9, r26	; 0x09
    26e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_vid_SendData+0x8e>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <LCD_vid_SendData+0x10c>
	else if (__tmp > 65535)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <LCD_vid_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <LCD_vid_SendData+0xee>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_vid_SendData+0xdc>
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <LCD_vid_SendData+0xd0>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <LCD_vid_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6f 81       	ldd	r22, Y+7	; 0x07
    2770:	78 85       	ldd	r23, Y+8	; 0x08
    2772:	89 85       	ldd	r24, Y+9	; 0x09
    2774:	9a 85       	ldd	r25, Y+10	; 0x0a
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_vid_SendData+0x118>
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    2796:	83 e0       	ldi	r24, 0x03	; 3
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>

}
    27a0:	2f 96       	adiw	r28, 0x0f	; 15
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_vid_SendCmd>:

void LCD_vid_SendCmd(u8 Copy_u8Cmd){
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	2f 97       	sbiw	r28, 0x0f	; 15
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinLow);   //RS=0        DATA SHEAT
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	65 e0       	ldi	r22, 0x05	; 5
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);   //RW=0
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	66 e0       	ldi	r22, 0x06	; 6
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Cmd);
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	6f 85       	ldd	r22, Y+15	; 0x0f
    27e0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);    //E=1&0
    27e4:	83 e0       	ldi	r24, 0x03	; 3
    27e6:	67 e0       	ldi	r22, 0x07	; 7
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e4       	ldi	r26, 0x40	; 64
    27f4:	b0 e4       	ldi	r27, 0x40	; 64
    27f6:	8b 87       	std	Y+11, r24	; 0x0b
    27f8:	9c 87       	std	Y+12, r25	; 0x0c
    27fa:	ad 87       	std	Y+13, r26	; 0x0d
    27fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2800:	7c 85       	ldd	r23, Y+12	; 0x0c
    2802:	8d 85       	ldd	r24, Y+13	; 0x0d
    2804:	9e 85       	ldd	r25, Y+14	; 0x0e
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8f 83       	std	Y+7, r24	; 0x07
    2818:	98 87       	std	Y+8, r25	; 0x08
    281a:	a9 87       	std	Y+9, r26	; 0x09
    281c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_vid_SendCmd+0x8e>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_vid_SendCmd+0x10c>
	else if (__tmp > 65535)
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_vid_SendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6b 85       	ldd	r22, Y+11	; 0x0b
    285a:	7c 85       	ldd	r23, Y+12	; 0x0c
    285c:	8d 85       	ldd	r24, Y+13	; 0x0d
    285e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_vid_SendCmd+0xee>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 83       	std	Y+4, r25	; 0x04
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_vid_SendCmd+0xdc>
    2892:	9c 83       	std	Y+4, r25	; 0x04
    2894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_vid_SendCmd+0xd0>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_vid_SendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_vid_SendCmd+0x118>
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	67 e0       	ldi	r22, 0x07	; 7
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>

}
    28dc:	2f 96       	adiw	r28, 0x0f	; 15
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_Vid_Init>:

void LCD_Vid_Init(void){
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	6c 97       	sbiw	r28, 0x1c	; 28
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e2       	ldi	r26, 0x20	; 32
    2908:	b2 e4       	ldi	r27, 0x42	; 66
    290a:	89 8f       	std	Y+25, r24	; 0x19
    290c:	9a 8f       	std	Y+26, r25	; 0x1a
    290e:	ab 8f       	std	Y+27, r26	; 0x1b
    2910:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	69 8d       	ldd	r22, Y+25	; 0x19
    2914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a ef       	ldi	r20, 0xFA	; 250
    2920:	54 e4       	ldi	r21, 0x44	; 68
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8d 8b       	std	Y+21, r24	; 0x15
    292c:	9e 8b       	std	Y+22, r25	; 0x16
    292e:	af 8b       	std	Y+23, r26	; 0x17
    2930:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2932:	6d 89       	ldd	r22, Y+21	; 0x15
    2934:	7e 89       	ldd	r23, Y+22	; 0x16
    2936:	8f 89       	ldd	r24, Y+23	; 0x17
    2938:	98 8d       	ldd	r25, Y+24	; 0x18
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_Vid_Init+0x66>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	8b 8b       	std	Y+19, r24	; 0x13
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <LCD_Vid_Init+0xe4>
	else if (__tmp > 65535)
    2954:	6d 89       	ldd	r22, Y+21	; 0x15
    2956:	7e 89       	ldd	r23, Y+22	; 0x16
    2958:	8f 89       	ldd	r24, Y+23	; 0x17
    295a:	98 8d       	ldd	r25, Y+24	; 0x18
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <LCD_Vid_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	69 8d       	ldd	r22, Y+25	; 0x19
    296e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <LCD_Vid_Init+0xc6>
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9a 8b       	std	Y+18, r25	; 0x12
    299c:	89 8b       	std	Y+17, r24	; 0x11
    299e:	89 89       	ldd	r24, Y+17	; 0x11
    29a0:	9a 89       	ldd	r25, Y+18	; 0x12
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_Vid_Init+0xb4>
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9c 8b       	std	Y+20, r25	; 0x14
    29b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8b 89       	ldd	r24, Y+19	; 0x13
    29b6:	9c 89       	ldd	r25, Y+20	; 0x14
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <LCD_Vid_Init+0xa8>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <LCD_Vid_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9c 8b       	std	Y+20, r25	; 0x14
    29d0:	8b 8b       	std	Y+19, r24	; 0x13
    29d2:	8b 89       	ldd	r24, Y+19	; 0x13
    29d4:	9c 89       	ldd	r25, Y+20	; 0x14
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	8f 87       	std	Y+15, r24	; 0x0f
    29da:	8f 85       	ldd	r24, Y+15	; 0x0f
    29dc:	98 89       	ldd	r25, Y+16	; 0x10
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_Vid_Init+0xf0>
    29e2:	98 8b       	std	Y+16, r25	; 0x10
    29e4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	LCD_vid_SendCmd(0b00111100);
    29e6:	8c e3       	ldi	r24, 0x3C	; 60
    29e8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e8       	ldi	r26, 0x80	; 128
    29f2:	bf e3       	ldi	r27, 0x3F	; 63
    29f4:	8b 87       	std	Y+11, r24	; 0x0b
    29f6:	9c 87       	std	Y+12, r25	; 0x0c
    29f8:	ad 87       	std	Y+13, r26	; 0x0d
    29fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a ef       	ldi	r20, 0xFA	; 250
    2a0a:	54 e4       	ldi	r21, 0x44	; 68
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8f 83       	std	Y+7, r24	; 0x07
    2a16:	98 87       	std	Y+8, r25	; 0x08
    2a18:	a9 87       	std	Y+9, r26	; 0x09
    2a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	2c f4       	brge	.+10     	; 0x2a3e <LCD_Vid_Init+0x150>
		__ticks = 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <LCD_Vid_Init+0x1ce>
	else if (__tmp > 65535)
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f5       	brge	.+82     	; 0x2aa8 <LCD_Vid_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	51 e4       	ldi	r21, 0x41	; 65
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <LCD_Vid_Init+0x1b0>
    2a80:	88 ec       	ldi	r24, 0xC8	; 200
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <LCD_Vid_Init+0x19e>
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <LCD_Vid_Init+0x192>
    2aa6:	14 c0       	rjmp	.+40     	; 0x2ad0 <LCD_Vid_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <LCD_Vid_Init+0x1da>
    2acc:	9a 83       	std	Y+2, r25	; 0x02
    2ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD_vid_SendCmd(0b00001100);
    2ad0:	8c e0       	ldi	r24, 0x0C	; 12
    2ad2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>

	LCD_vid_SendCmd(1);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>

}
    2adc:	6c 96       	adiw	r28, 0x1c	; 28
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <LCD_vid_DisplayClear>:

void LCD_vid_DisplayClear(){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	LCD_vid_SendCmd(1);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <LCD_vid_GoTo>:
void LCD_vid_GoTo(u8 Copy_u8X,u8 Copy_u8Y){
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <LCD_vid_GoTo+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8X==1){
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	19 f4       	brne	.+6      	; 0x2b1c <LCD_vid_GoTo+0x1a>
		Copy_u8Y +=0x40;
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	80 5c       	subi	r24, 0xC0	; 192
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
	}

	LCD_vid_SendCmd(Copy_u8Y+0b10000000);       //the place which i want go to in DDRAM//
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	80 58       	subi	r24, 0x80	; 128
    2b20:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>
}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_VidSendSpecaialChar>:

//x=0for first line and 1 for secondline
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	27 97       	sbiw	r28, 0x07	; 7
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
    2b46:	6d 83       	std	Y+5, r22	; 0x05
    2b48:	4e 83       	std	Y+6, r20	; 0x06
    2b4a:	2f 83       	std	Y+7, r18	; 0x07

u8 Local_Adress=8*Pattern_Num;
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
LCD_vid_SendCmd(0b01000000+Local_Adress);
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	80 5c       	subi	r24, 0xC0	; 192
    2b64:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_vid_SendCmd>
for(u8 i=0;i<8;i++){
    2b68:	19 82       	std	Y+1, r1	; 0x01
    2b6a:	0e c0       	rjmp	.+28     	; 0x2b88 <LCD_VidSendSpecaialChar+0x5a>
	LCD_vid_SendData(Pattern[i]);
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	fc 01       	movw	r30, r24
    2b78:	e2 0f       	add	r30, r18
    2b7a:	f3 1f       	adc	r31, r19
    2b7c:	80 81       	ld	r24, Z
    2b7e:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_vid_SendData>
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){

u8 Local_Adress=8*Pattern_Num;
LCD_vid_SendCmd(0b01000000+Local_Adress);
for(u8 i=0;i<8;i++){
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	88 30       	cpi	r24, 0x08	; 8
    2b8c:	78 f3       	brcs	.-34     	; 0x2b6c <LCD_VidSendSpecaialChar+0x3e>
	LCD_vid_SendData(Pattern[i]);
}
LCD_vid_GoTo(Copy_u8XPos,Copy_u8YPos);
    2b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b90:	6f 81       	ldd	r22, Y+7	; 0x07
    2b92:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
LCD_vid_SendData(Pattern_Num);
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_vid_SendData>
}
    2b9c:	27 96       	adiw	r28, 0x07	; 7
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <LCD_vid_SendInt>:


void LCD_vid_SendInt(u32 Copy_u8Number){
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <LCD_vid_SendInt+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Number!=0){
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	a1 f0       	breq	.+40     	; 0x2bec <LCD_vid_SendInt+0x3e>
		LCD_vid_SendInt(Copy_u8Number/10);
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	2a e0       	ldi	r18, 0x0A	; 10
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	b9 01       	movw	r22, r18
    2bce:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__udivmodhi4>
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_vid_SendInt>
		LCD_vid_SendData((Copy_u8Number%10)+48);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	2a e0       	ldi	r18, 0x0A	; 10
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	b9 01       	movw	r22, r18
    2be2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__udivmodhi4>
    2be6:	80 5d       	subi	r24, 0xD0	; 208
    2be8:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_vid_SendData>


	}
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <LCD_vid_SendString>:


void LCD_vid_SendString(const s8 *Copy_ps8string){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <LCD_vid_SendString+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	0a c0       	rjmp	.+20     	; 0x2c1a <LCD_vid_SendString+0x24>

	while(*Copy_ps8string!='\0'){

		LCD_vid_SendData(*Copy_ps8string);
    2c06:	e9 81       	ldd	r30, Y+1	; 0x01
    2c08:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0a:	80 81       	ld	r24, Z
    2c0c:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_vid_SendData>
		Copy_ps8string++;
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vid_SendString(const s8 *Copy_ps8string){

	while(*Copy_ps8string!='\0'){
    2c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	89 f7       	brne	.-30     	; 0x2c06 <LCD_vid_SendString+0x10>
		LCD_vid_SendData(*Copy_ps8string);
		Copy_ps8string++;
	}


}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <Keypad_Init>:
/*************************************DELAY*******************************/
#include <util/delay.h>



void Keypad_Init() {
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
	//DIO_Vid_SetPortDirection(Port_B,output);   //Column output:only the first 4 bins
	DIO_Vid_SetPinDirection(Port_B,pin0,output);
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin1,output);
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin2,output);
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	62 e0       	ldi	r22, 0x02	; 2
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin3,output);
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	63 e0       	ldi	r22, 0x03	; 3
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>


  //  DIO_Vid_SetPortDirection(Port_A,input);    //Row input pull up: only the first 4 bins
	DIO_Vid_SetPinDirection(Port_A,pin0,input);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin1,input);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	61 e0       	ldi	r22, 0x01	; 1
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin2,input);
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	62 e0       	ldi	r22, 0x02	; 2
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin3,input);
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	63 e0       	ldi	r22, 0x03	; 3
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>

    DIO_Vid_SetPortValue(Port_A,0b00001111);         //pullup
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	6f e0       	ldi	r22, 0x0F	; 15
    2c8a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <DIO_Vid_SetPortValue>

}
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <Keypad_u8GetPressedKey>:

u8 Keypad_u8GetPressedKey(){
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	a8 97       	sbiw	r28, 0x28	; 40
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
		u8 Keypad_Arr[4][4]={ {'7','8','9','/'} ,{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'} };
    2ca8:	ce 01       	movw	r24, r28
    2caa:	42 96       	adiw	r24, 0x12	; 18
    2cac:	9d a3       	std	Y+37, r25	; 0x25
    2cae:	8c a3       	std	Y+36, r24	; 0x24
    2cb0:	e4 ec       	ldi	r30, 0xC4	; 196
    2cb2:	f1 e0       	ldi	r31, 0x01	; 1
    2cb4:	ff a3       	std	Y+39, r31	; 0x27
    2cb6:	ee a3       	std	Y+38, r30	; 0x26
    2cb8:	f0 e1       	ldi	r31, 0x10	; 16
    2cba:	f8 a7       	std	Y+40, r31	; 0x28
    2cbc:	ee a1       	ldd	r30, Y+38	; 0x26
    2cbe:	ff a1       	ldd	r31, Y+39	; 0x27
    2cc0:	00 80       	ld	r0, Z
    2cc2:	8e a1       	ldd	r24, Y+38	; 0x26
    2cc4:	9f a1       	ldd	r25, Y+39	; 0x27
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	9f a3       	std	Y+39, r25	; 0x27
    2cca:	8e a3       	std	Y+38, r24	; 0x26
    2ccc:	ec a1       	ldd	r30, Y+36	; 0x24
    2cce:	fd a1       	ldd	r31, Y+37	; 0x25
    2cd0:	00 82       	st	Z, r0
    2cd2:	8c a1       	ldd	r24, Y+36	; 0x24
    2cd4:	9d a1       	ldd	r25, Y+37	; 0x25
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	9d a3       	std	Y+37, r25	; 0x25
    2cda:	8c a3       	std	Y+36, r24	; 0x24
    2cdc:	98 a5       	ldd	r25, Y+40	; 0x28
    2cde:	91 50       	subi	r25, 0x01	; 1
    2ce0:	98 a7       	std	Y+40, r25	; 0x28
    2ce2:	e8 a5       	ldd	r30, Y+40	; 0x28
    2ce4:	ee 23       	and	r30, r30
    2ce6:	51 f7       	brne	.-44     	; 0x2cbc <Keypad_u8GetPressedKey+0x28>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    2ce8:	18 8a       	std	Y+16, r1	; 0x10
    2cea:	d3 c0       	rjmp	.+422    	; 0x2e92 <Keypad_u8GetPressedKey+0x1fe>
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
    2cec:	88 89       	ldd	r24, Y+16	; 0x10
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e4 54       	subi	r30, 0x44	; 68
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	90 81       	ld	r25, Z
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	69 2f       	mov	r22, r25
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    2d04:	1f 86       	std	Y+15, r1	; 0x0f
    2d06:	b2 c0       	rjmp	.+356    	; 0x2e6c <Keypad_u8GetPressedKey+0x1d8>
		    {
		      DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);
    2d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e0 54       	subi	r30, 0x40	; 64
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	90 81       	ld	r25, Z
    2d16:	9e 01       	movw	r18, r28
    2d18:	2e 5d       	subi	r18, 0xDE	; 222
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	69 2f       	mov	r22, r25
    2d20:	a9 01       	movw	r20, r18
    2d22:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_Vid_GetPinValue>
		      /*check pin value equal to zero or not */
		      if(DataInput==0)
    2d26:	8a a1       	ldd	r24, Y+34	; 0x22
    2d28:	88 23       	and	r24, r24
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <Keypad_u8GetPressedKey+0x9a>
    2d2c:	9c c0       	rjmp	.+312    	; 0x2e66 <Keypad_u8GetPressedKey+0x1d2>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	a8 e4       	ldi	r26, 0x48	; 72
    2d34:	b3 e4       	ldi	r27, 0x43	; 67
    2d36:	8b 87       	std	Y+11, r24	; 0x0b
    2d38:	9c 87       	std	Y+12, r25	; 0x0c
    2d3a:	ad 87       	std	Y+13, r26	; 0x0d
    2d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a ef       	ldi	r20, 0xFA	; 250
    2d4c:	54 e4       	ldi	r21, 0x44	; 68
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8f 83       	std	Y+7, r24	; 0x07
    2d58:	98 87       	std	Y+8, r25	; 0x08
    2d5a:	a9 87       	std	Y+9, r26	; 0x09
    2d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <Keypad_u8GetPressedKey+0xec>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <Keypad_u8GetPressedKey+0x16a>
	else if (__tmp > 65535)
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <Keypad_u8GetPressedKey+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <Keypad_u8GetPressedKey+0x14c>
    2dc2:	88 ec       	ldi	r24, 0xC8	; 200
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <Keypad_u8GetPressedKey+0x13a>
    2dd2:	9c 83       	std	Y+4, r25	; 0x04
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <Keypad_u8GetPressedKey+0x12e>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <Keypad_u8GetPressedKey+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	9a 83       	std	Y+2, r25	; 0x02
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <Keypad_u8GetPressedKey+0x176>
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];
    2e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	88 89       	ldd	r24, Y+16	; 0x10
    2e1a:	48 2f       	mov	r20, r24
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	22 0f       	add	r18, r18
    2e20:	33 1f       	adc	r19, r19
    2e22:	22 0f       	add	r18, r18
    2e24:	33 1f       	adc	r19, r19
    2e26:	ce 01       	movw	r24, r28
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	84 0f       	add	r24, r20
    2e30:	95 1f       	adc	r25, r21
    2e32:	fc 01       	movw	r30, r24
    2e34:	71 96       	adiw	r30, 0x11	; 17
    2e36:	80 81       	ld	r24, Z
    2e38:	89 8b       	std	Y+17, r24	; 0x11
    2e3a:	0f c0       	rjmp	.+30     	; 0x2e5a <Keypad_u8GetPressedKey+0x1c6>

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
    2e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	fc 01       	movw	r30, r24
    2e44:	e0 54       	subi	r30, 0x40	; 64
    2e46:	fe 4f       	sbci	r31, 0xFE	; 254
    2e48:	90 81       	ld	r25, Z
    2e4a:	9e 01       	movw	r18, r28
    2e4c:	2e 5d       	subi	r18, 0xDE	; 222
    2e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	69 2f       	mov	r22, r25
    2e54:	a9 01       	movw	r20, r18
    2e56:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <DIO_Vid_GetPinValue>
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
    2e5a:	8a a1       	ldd	r24, Y+34	; 0x22
    2e5c:	88 23       	and	r24, r24
    2e5e:	71 f3       	breq	.-36     	; 0x2e3c <Keypad_u8GetPressedKey+0x1a8>
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
		           }

		      return PressedKey;
    2e60:	f9 89       	ldd	r31, Y+17	; 0x11
    2e62:	fb a3       	std	Y+35, r31	; 0x23
    2e64:	1c c0       	rjmp	.+56     	; 0x2e9e <Keypad_u8GetPressedKey+0x20a>


	 for(Col=0;Col<4;Col++)
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    2e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	8f 87       	std	Y+15, r24	; 0x0f
    2e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	08 f4       	brcc	.+2      	; 0x2e74 <Keypad_u8GetPressedKey+0x1e0>
    2e72:	4a cf       	rjmp	.-364    	; 0x2d08 <Keypad_u8GetPressedKey+0x74>
		           }

		      return PressedKey;
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
    2e74:	88 89       	ldd	r24, Y+16	; 0x10
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e4 54       	subi	r30, 0x44	; 68
    2e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e80:	90 81       	ld	r25, Z
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	69 2f       	mov	r22, r25
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    2e8c:	88 89       	ldd	r24, Y+16	; 0x10
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	88 8b       	std	Y+16, r24	; 0x10
    2e92:	88 89       	ldd	r24, Y+16	; 0x10
    2e94:	84 30       	cpi	r24, 0x04	; 4
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <Keypad_u8GetPressedKey+0x206>
    2e98:	29 cf       	rjmp	.-430    	; 0x2cec <Keypad_u8GetPressedKey+0x58>
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
		 }
		/* if there is no key is pressed return message '101'return '0';*/
	return 101;
    2e9a:	85 e6       	ldi	r24, 0x65	; 101
    2e9c:	8b a3       	std	Y+35, r24	; 0x23
    2e9e:	8b a1       	ldd	r24, Y+35	; 0x23
	// return PressedKey;
	  }
    2ea0:	a8 96       	adiw	r28, 0x28	; 40
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <MOTOR_VidInit>:

/***********************************MCAL************************/
#include"../../MCAL/DIO/DIO_Interface.h"

/**********************************Functions********************/
void MOTOR_VidInit(void){
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinDirection(MOTOR_PORT,MOTOR_ACW_PIN,output);
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	61 e0       	ldi	r22, 0x01	; 1
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(MOTOR_PORT,MOTOR_CW_PIN,output);
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>

}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <MOTOR_VidCounterClockwise>:
void MOTOR_VidCounterClockwise(void){
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_ACW_PIN,PinLow);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
}
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <MOTOR_VidCounterAntiClockwise>:
void MOTOR_VidCounterAntiClockwise(void){
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_ACW_PIN,PinHigh);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
		DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinLow);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
}
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <MOTOR_Stop>:
void MOTOR_Stop(void){
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    2f20:	82 e0       	ldi	r24, 0x02	; 2
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
}
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <Handle_EXTI0>:
 * Mode 2 : 2
 * Mode 3 : 3
 ********************************************************/
u8 Mode_Select=0;

void Handle_EXTI0(void){
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	     if(Mode_Select == 0){
    2f42:	80 91 ea 01 	lds	r24, 0x01EA
    2f46:	88 23       	and	r24, r24
    2f48:	19 f1       	breq	.+70     	; 0x2f90 <Handle_EXTI0+0x56>
	    	 /*Mode 0: No Interrupts*/
	     }
	     else if (Mode_Select == 1){
    2f4a:	80 91 ea 01 	lds	r24, 0x01EA
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	49 f4       	brne	.+18     	; 0x2f64 <Handle_EXTI0+0x2a>
	    	 /* Mode 1: Enable EXTI0 : Toggle LED0*/
	    	 Toggle_BIT(PORTB,pin0);
    2f52:	a8 e3       	ldi	r26, 0x38	; 56
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	e8 e3       	ldi	r30, 0x38	; 56
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	90 81       	ld	r25, Z
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	89 27       	eor	r24, r25
    2f60:	8c 93       	st	X, r24
    2f62:	16 c0       	rjmp	.+44     	; 0x2f90 <Handle_EXTI0+0x56>
	     }

	     else if(Mode_Select == 2){
    2f64:	80 91 ea 01 	lds	r24, 0x01EA
    2f68:	82 30       	cpi	r24, 0x02	; 2
    2f6a:	31 f4       	brne	.+12     	; 0x2f78 <Handle_EXTI0+0x3e>
	    	 /* Mode 2: Enable EXTI0 : SET LED0*/
	    	 DIO_Vid_SetPinValue(Port_B,pin0,PinHigh);
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
    2f76:	0c c0       	rjmp	.+24     	; 0x2f90 <Handle_EXTI0+0x56>
	     }
	     else if(Mode_Select == 3){
    2f78:	80 91 ea 01 	lds	r24, 0x01EA
    2f7c:	83 30       	cpi	r24, 0x03	; 3
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <Handle_EXTI0+0x56>
	    	 /* Mode 3: Enable EXTI0 : Toggle LED0*/
	    	 Toggle_BIT(PORTB,pin0);
    2f80:	a8 e3       	ldi	r26, 0x38	; 56
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e8 e3       	ldi	r30, 0x38	; 56
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	90 81       	ld	r25, Z
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	89 27       	eor	r24, r25
    2f8e:	8c 93       	st	X, r24

	     else{
	    	           /*Nothing*/
	     }

}
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <Handle_EXTI1>:

void Handle_EXTI1(void){
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62


	/*clear EXTI 1 flag */
	SET_BIT(GIFR, GIFR_INTF1);
    2f9e:	aa e5       	ldi	r26, 0x5A	; 90
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	ea e5       	ldi	r30, 0x5A	; 90
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	80 68       	ori	r24, 0x80	; 128
    2faa:	8c 93       	st	X, r24

	 if(Mode_Select == 0){
    2fac:	80 91 ea 01 	lds	r24, 0x01EA
    2fb0:	88 23       	and	r24, r24
    2fb2:	d1 f0       	breq	.+52     	; 0x2fe8 <Handle_EXTI1+0x52>
		    	 /*Mode 0: No Interrupts*/
		     }
	else if (Mode_Select == 1){
    2fb4:	80 91 ea 01 	lds	r24, 0x01EA
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	b1 f0       	breq	.+44     	; 0x2fe8 <Handle_EXTI1+0x52>
		    	 /*Nothing By EXTI1*/
		     }

     else if(Mode_Select == 2){
    2fbc:	80 91 ea 01 	lds	r24, 0x01EA
    2fc0:	82 30       	cpi	r24, 0x02	; 2
    2fc2:	31 f4       	brne	.+12     	; 0x2fd0 <Handle_EXTI1+0x3a>
		    	 /* Mode 2: Enable EXTI0 : Clear LED0*/
		    	 DIO_Vid_SetPinValue(Port_B,pin0,PinLow);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
    2fce:	0c c0       	rjmp	.+24     	; 0x2fe8 <Handle_EXTI1+0x52>
		     }
     else if(Mode_Select == 3){
    2fd0:	80 91 ea 01 	lds	r24, 0x01EA
    2fd4:	83 30       	cpi	r24, 0x03	; 3
    2fd6:	41 f4       	brne	.+16     	; 0x2fe8 <Handle_EXTI1+0x52>
		    	 /* Mode 3: Enable EXTI0 : Toggle LED1*/
		    	 Toggle_BIT(PORTB,pin1);
    2fd8:	a8 e3       	ldi	r26, 0x38	; 56
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e8 e3       	ldi	r30, 0x38	; 56
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	90 81       	ld	r25, Z
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	89 27       	eor	r24, r25
    2fe6:	8c 93       	st	X, r24

	  else{
		    	           /*Nothing*/
		     }

}
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <main>:



int main(){
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <main+0x6>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62

	/**************************************LCD*********************************/
	DIO_Vid_SetPortDirection(Port_C,output);
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	61 e0       	ldi	r22, 0x01	; 1
    2ffc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DIO_Vid_SetPortDirection>
	DIO_Vid_SetPinDirection(Port_D,pin5,output);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	65 e0       	ldi	r22, 0x05	; 5
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_D,pin6,output);
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	66 e0       	ldi	r22, 0x06	; 6
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_D,pin7,output);
    3014:	83 e0       	ldi	r24, 0x03	; 3
    3016:	67 e0       	ldi	r22, 0x07	; 7
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	LCD_Vid_Init();
    301e:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_Vid_Init>

	/**************************************ADC*********************************/
	DIO_Vid_SetPinDirection(Port_A,pin0,input);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	ADC_voidInit();
    302c:	0e 94 1c 10 	call	0x2038	; 0x2038 <ADC_voidInit>

	/***************************************Interrupts*************************/

	DIO_Vid_SetPinDirection(Port_D,pin2,input);  //INT0
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	62 e0       	ldi	r22, 0x02	; 2
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_D,pin3,input);  //INT1
    303a:	83 e0       	ldi	r24, 0x03	; 3
    303c:	63 e0       	ldi	r22, 0x03	; 3
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	GIE_VidEn();
    3044:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GIE_VidEn>
	EXTI_voidInit();
    3048:	0e 94 36 0a 	call	0x146c	; 0x146c <EXTI_voidInit>


	/*****************************************LED*******************************/
	DIO_Vid_SetPinDirection(Port_B,pin0,output);
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin1,output);
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	61 e0       	ldi	r22, 0x01	; 1
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	0e 94 83 0c 	call	0x1906	; 0x1906 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinValue(Port_B,pin1,PinLow);
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_B,pin0,PinLow);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <DIO_Vid_SetPinValue>

	 EXTI_u8Int0SetCallBack(Handle_EXTI0);
    3074:	8d e9       	ldi	r24, 0x9D	; 157
    3076:	97 e1       	ldi	r25, 0x17	; 23
    3078:	0e 94 93 0b 	call	0x1726	; 0x1726 <EXTI_u8Int0SetCallBack>
	 EXTI_u8Int1SetCallBack(Handle_EXTI1);
    307c:	8b ec       	ldi	r24, 0xCB	; 203
    307e:	97 e1       	ldi	r25, 0x17	; 23
    3080:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <EXTI_u8Int1SetCallBack>


	 LCD_vid_GoTo(0,5);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	65 e0       	ldi	r22, 0x05	; 5
    3088:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
	 LCD_vid_SendString("Welcome!");
    308c:	80 e6       	ldi	r24, 0x60	; 96
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
	 LCD_vid_GoTo(1,4);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	64 e0       	ldi	r22, 0x04	; 4
    3098:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
	 LCD_vid_SendString("Challenge 1");
    309c:	89 e6       	ldi	r24, 0x69	; 105
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>

	u16 Local_ADC;

	while(1){

		Local_ADC=ADC_u16GetConversionReading(CHANNEL0);
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <ADC_u16GetConversionReading>
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
		 * MODE3: Vin=2.14V  --> Local_ADC = 856
		 *
		 *
		 * */
		                           /*MODE 0*/
	if(Local_ADC>600 && Local_ADC<700){
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	22 e0       	ldi	r18, 0x02	; 2
    30b4:	89 35       	cpi	r24, 0x59	; 89
    30b6:	92 07       	cpc	r25, r18
    30b8:	e8 f0       	brcs	.+58     	; 0x30f4 <main+0x106>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	22 e0       	ldi	r18, 0x02	; 2
    30c0:	8c 3b       	cpi	r24, 0xBC	; 188
    30c2:	92 07       	cpc	r25, r18
    30c4:	b8 f4       	brcc	.+46     	; 0x30f4 <main+0x106>
			GIE_VidDisable();
    30c6:	0e 94 28 0a 	call	0x1450	; 0x1450 <GIE_VidDisable>
			LCD_vid_DisplayClear();
    30ca:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_vid_DisplayClear>
			LCD_vid_GoTo(0,1);
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	61 e0       	ldi	r22, 0x01	; 1
    30d2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("MODE 0");
    30d6:	85 e7       	ldi	r24, 0x75	; 117
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			LCD_vid_GoTo(1,0);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("No Maskable");
    30e6:	8c e7       	ldi	r24, 0x7C	; 124
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			Mode_Select=0;
    30ee:	10 92 ea 01 	sts	0x01EA, r1
    30f2:	d8 cf       	rjmp	.-80     	; 0x30a4 <main+0xb6>
		}
									/*MODE 1*/
	else if(Local_ADC>900 && Local_ADC<1000 ){
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	23 e0       	ldi	r18, 0x03	; 3
    30fa:	85 38       	cpi	r24, 0x85	; 133
    30fc:	92 07       	cpc	r25, r18
    30fe:	f0 f0       	brcs	.+60     	; 0x313c <main+0x14e>
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	9a 81       	ldd	r25, Y+2	; 0x02
    3104:	23 e0       	ldi	r18, 0x03	; 3
    3106:	88 3e       	cpi	r24, 0xE8	; 232
    3108:	92 07       	cpc	r25, r18
    310a:	c0 f4       	brcc	.+48     	; 0x313c <main+0x14e>

			GIE_VidEn();
    310c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GIE_VidEn>
			LCD_vid_DisplayClear();
    3110:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_vid_DisplayClear>
			LCD_vid_GoTo(0,1);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("MODE 1");
    311c:	88 e8       	ldi	r24, 0x88	; 136
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			LCD_vid_GoTo(1,1);
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	61 e0       	ldi	r22, 0x01	; 1
    3128:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("EXTI 0");
    312c:	8f e8       	ldi	r24, 0x8F	; 143
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			Mode_Select=1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	80 93 ea 01 	sts	0x01EA, r24
    313a:	b4 cf       	rjmp	.-152    	; 0x30a4 <main+0xb6>
		}
                                   /*MODE 2*/
	else if(Local_ADC>160 && Local_ADC <200){
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	81 3a       	cpi	r24, 0xA1	; 161
    3142:	91 05       	cpc	r25, r1
    3144:	e8 f0       	brcs	.+58     	; 0x3180 <main+0x192>
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	9a 81       	ldd	r25, Y+2	; 0x02
    314a:	88 3c       	cpi	r24, 0xC8	; 200
    314c:	91 05       	cpc	r25, r1
    314e:	c0 f4       	brcc	.+48     	; 0x3180 <main+0x192>
			GIE_VidEn();
    3150:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GIE_VidEn>
		    LCD_vid_DisplayClear();
    3154:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_vid_DisplayClear>
			LCD_vid_GoTo(0,1);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	61 e0       	ldi	r22, 0x01	; 1
    315c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("MODE 2");
    3160:	86 e9       	ldi	r24, 0x96	; 150
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			LCD_vid_GoTo(1,1);
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
			LCD_vid_SendString("EXTI 0 , EXTI 1");
    3170:	8d e9       	ldi	r24, 0x9D	; 157
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
			Mode_Select=2;
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	80 93 ea 01 	sts	0x01EA, r24
    317e:	92 cf       	rjmp	.-220    	; 0x30a4 <main+0xb6>
		}
	                             /*MODE 3*/
	else if(Local_ADC>800 && Local_ADC <900){
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	23 e0       	ldi	r18, 0x03	; 3
    3186:	81 32       	cpi	r24, 0x21	; 33
    3188:	92 07       	cpc	r25, r18
    318a:	08 f4       	brcc	.+2      	; 0x318e <main+0x1a0>
    318c:	8b cf       	rjmp	.-234    	; 0x30a4 <main+0xb6>
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	23 e0       	ldi	r18, 0x03	; 3
    3194:	84 38       	cpi	r24, 0x84	; 132
    3196:	92 07       	cpc	r25, r18
    3198:	08 f0       	brcs	.+2      	; 0x319c <main+0x1ae>
    319a:	84 cf       	rjmp	.-248    	; 0x30a4 <main+0xb6>
		GIE_VidEn();
    319c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GIE_VidEn>
		LCD_vid_DisplayClear();
    31a0:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_vid_DisplayClear>
		LCD_vid_GoTo(0,1);
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	61 e0       	ldi	r22, 0x01	; 1
    31a8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
		LCD_vid_SendString("MODE 3");
    31ac:	8d ea       	ldi	r24, 0xAD	; 173
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
		LCD_vid_GoTo(1,1);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	61 e0       	ldi	r22, 0x01	; 1
    31b8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_vid_GoTo>
		LCD_vid_SendString("EXTI 0 , EXTI 1");
    31bc:	8d e9       	ldi	r24, 0x9D	; 157
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <LCD_vid_SendString>
		Mode_Select=3;
    31c4:	83 e0       	ldi	r24, 0x03	; 3
    31c6:	80 93 ea 01 	sts	0x01EA, r24
    31ca:	6c cf       	rjmp	.-296    	; 0x30a4 <main+0xb6>

000031cc <__udivmodhi4>:
    31cc:	aa 1b       	sub	r26, r26
    31ce:	bb 1b       	sub	r27, r27
    31d0:	51 e1       	ldi	r21, 0x11	; 17
    31d2:	07 c0       	rjmp	.+14     	; 0x31e2 <__udivmodhi4_ep>

000031d4 <__udivmodhi4_loop>:
    31d4:	aa 1f       	adc	r26, r26
    31d6:	bb 1f       	adc	r27, r27
    31d8:	a6 17       	cp	r26, r22
    31da:	b7 07       	cpc	r27, r23
    31dc:	10 f0       	brcs	.+4      	; 0x31e2 <__udivmodhi4_ep>
    31de:	a6 1b       	sub	r26, r22
    31e0:	b7 0b       	sbc	r27, r23

000031e2 <__udivmodhi4_ep>:
    31e2:	88 1f       	adc	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	5a 95       	dec	r21
    31e8:	a9 f7       	brne	.-22     	; 0x31d4 <__udivmodhi4_loop>
    31ea:	80 95       	com	r24
    31ec:	90 95       	com	r25
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	08 95       	ret

000031f4 <__prologue_saves__>:
    31f4:	2f 92       	push	r2
    31f6:	3f 92       	push	r3
    31f8:	4f 92       	push	r4
    31fa:	5f 92       	push	r5
    31fc:	6f 92       	push	r6
    31fe:	7f 92       	push	r7
    3200:	8f 92       	push	r8
    3202:	9f 92       	push	r9
    3204:	af 92       	push	r10
    3206:	bf 92       	push	r11
    3208:	cf 92       	push	r12
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	ca 1b       	sub	r28, r26
    321e:	db 0b       	sbc	r29, r27
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	09 94       	ijmp

0000322c <__epilogue_restores__>:
    322c:	2a 88       	ldd	r2, Y+18	; 0x12
    322e:	39 88       	ldd	r3, Y+17	; 0x11
    3230:	48 88       	ldd	r4, Y+16	; 0x10
    3232:	5f 84       	ldd	r5, Y+15	; 0x0f
    3234:	6e 84       	ldd	r6, Y+14	; 0x0e
    3236:	7d 84       	ldd	r7, Y+13	; 0x0d
    3238:	8c 84       	ldd	r8, Y+12	; 0x0c
    323a:	9b 84       	ldd	r9, Y+11	; 0x0b
    323c:	aa 84       	ldd	r10, Y+10	; 0x0a
    323e:	b9 84       	ldd	r11, Y+9	; 0x09
    3240:	c8 84       	ldd	r12, Y+8	; 0x08
    3242:	df 80       	ldd	r13, Y+7	; 0x07
    3244:	ee 80       	ldd	r14, Y+6	; 0x06
    3246:	fd 80       	ldd	r15, Y+5	; 0x05
    3248:	0c 81       	ldd	r16, Y+4	; 0x04
    324a:	1b 81       	ldd	r17, Y+3	; 0x03
    324c:	aa 81       	ldd	r26, Y+2	; 0x02
    324e:	b9 81       	ldd	r27, Y+1	; 0x01
    3250:	ce 0f       	add	r28, r30
    3252:	d1 1d       	adc	r29, r1
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	ed 01       	movw	r28, r26
    3260:	08 95       	ret

00003262 <_exit>:
    3262:	f8 94       	cli

00003264 <__stop_program>:
    3264:	ff cf       	rjmp	.-2      	; 0x3264 <__stop_program>
